/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["trader"],{

/***/ "../../reports/src/Stores/Modules/Profit/Helpers/format-request.ts":
/*!*************************************************************************!*\
  !*** ../../reports/src/Stores/Modules/Profit/Helpers/format-request.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\nconst getDateTo = date_to => {\n  const today = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.toMoment)().startOf('day').unix();\n  if (date_to && today > date_to) {\n    return date_to;\n  }\n  return (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.epochToMoment)(today).add(1, 'd').subtract(1, 's').unix();\n};\nconst getDateFrom = (should_load_partially, partial_fetch_time, date_from, date_to) => {\n  const today = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.toMoment)().startOf('day').unix();\n  if (date_to && today > date_to) {\n    return date_from;\n  }\n  return should_load_partially && partial_fetch_time ? partial_fetch_time : date_from;\n};\nconst shouldSendDateFrom = (date_from, should_load_partially, partial_fetch_time, date_to) => {\n  const today = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.toMoment)().startOf('day').unix();\n  if (date_to && today > date_to) {\n    return !!date_from || should_load_partially;\n  }\n  return should_load_partially ? partial_fetch_time || date_from : !!date_from || false;\n};\nconst getDateBoundaries = function (date_from, date_to, partial_fetch_time) {\n  let should_load_partially = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  return _objectSpread(_objectSpread({}, shouldSendDateFrom(date_from, should_load_partially, partial_fetch_time, date_to) && {\n    date_from: getDateFrom(should_load_partially, partial_fetch_time, date_from, date_to)\n  }), (date_to || should_load_partially) && {\n    date_to: getDateTo(date_to)\n  });\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getDateBoundaries);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vcmVwb3J0cy9zcmMvU3RvcmVzL01vZHVsZXMvUHJvZml0L0hlbHBlcnMvZm9ybWF0LXJlcXVlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUdBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uLy4uL3JlcG9ydHMvc3JjL1N0b3Jlcy9Nb2R1bGVzL1Byb2ZpdC9IZWxwZXJzL2Zvcm1hdC1yZXF1ZXN0LnRzP2QwNzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXBvY2hUb01vbWVudCwgdG9Nb21lbnQgfSBmcm9tICdAZGVyaXYvc2hhcmVkJztcblxudHlwZSBURGF0ZVRvT3JGcm9tID0gbnVtYmVyIHwgbnVsbDtcbnR5cGUgVFBhcnRpYWxGZXRjaFRpbWUgPSBib29sZWFuIHwgbnVtYmVyO1xuXG5jb25zdCBnZXREYXRlVG8gPSAoZGF0ZV90bzogVERhdGVUb09yRnJvbSkgPT4ge1xuICAgIGNvbnN0IHRvZGF5ID0gdG9Nb21lbnQoKS5zdGFydE9mKCdkYXknKS51bml4KCk7XG4gICAgaWYgKGRhdGVfdG8gJiYgdG9kYXkgPiBkYXRlX3RvKSB7XG4gICAgICAgIHJldHVybiBkYXRlX3RvO1xuICAgIH1cbiAgICByZXR1cm4gZXBvY2hUb01vbWVudCh0b2RheSkuYWRkKDEsICdkJykuc3VidHJhY3QoMSwgJ3MnKS51bml4KCk7XG59O1xuXG5jb25zdCBnZXREYXRlRnJvbSA9IChcbiAgICBzaG91bGRfbG9hZF9wYXJ0aWFsbHk6IGJvb2xlYW4sXG4gICAgcGFydGlhbF9mZXRjaF90aW1lOiBUUGFydGlhbEZldGNoVGltZSxcbiAgICBkYXRlX2Zyb206IFREYXRlVG9PckZyb20sXG4gICAgZGF0ZV90bzogVERhdGVUb09yRnJvbVxuKSA9PiB7XG4gICAgY29uc3QgdG9kYXkgPSB0b01vbWVudCgpLnN0YXJ0T2YoJ2RheScpLnVuaXgoKTtcbiAgICBpZiAoZGF0ZV90byAmJiB0b2RheSA+IGRhdGVfdG8pIHtcbiAgICAgICAgcmV0dXJuIGRhdGVfZnJvbTtcbiAgICB9XG4gICAgcmV0dXJuIHNob3VsZF9sb2FkX3BhcnRpYWxseSAmJiBwYXJ0aWFsX2ZldGNoX3RpbWUgPyBwYXJ0aWFsX2ZldGNoX3RpbWUgOiBkYXRlX2Zyb207XG59O1xuXG5jb25zdCBzaG91bGRTZW5kRGF0ZUZyb20gPSAoXG4gICAgZGF0ZV9mcm9tOiBURGF0ZVRvT3JGcm9tLFxuICAgIHNob3VsZF9sb2FkX3BhcnRpYWxseTogYm9vbGVhbixcbiAgICBwYXJ0aWFsX2ZldGNoX3RpbWU6IFRQYXJ0aWFsRmV0Y2hUaW1lLFxuICAgIGRhdGVfdG86IFREYXRlVG9PckZyb21cbikgPT4ge1xuICAgIGNvbnN0IHRvZGF5ID0gdG9Nb21lbnQoKS5zdGFydE9mKCdkYXknKS51bml4KCk7XG4gICAgaWYgKGRhdGVfdG8gJiYgdG9kYXkgPiBkYXRlX3RvKSB7XG4gICAgICAgIHJldHVybiAhIWRhdGVfZnJvbSB8fCBzaG91bGRfbG9hZF9wYXJ0aWFsbHk7XG4gICAgfVxuICAgIHJldHVybiBzaG91bGRfbG9hZF9wYXJ0aWFsbHkgPyBwYXJ0aWFsX2ZldGNoX3RpbWUgfHwgZGF0ZV9mcm9tIDogISFkYXRlX2Zyb20gfHwgZmFsc2U7XG59O1xuXG5jb25zdCBnZXREYXRlQm91bmRhcmllcyA9IChcbiAgICBkYXRlX2Zyb206IFREYXRlVG9PckZyb20sXG4gICAgZGF0ZV90bzogVERhdGVUb09yRnJvbSxcbiAgICBwYXJ0aWFsX2ZldGNoX3RpbWU6IFRQYXJ0aWFsRmV0Y2hUaW1lLFxuICAgIHNob3VsZF9sb2FkX3BhcnRpYWxseSA9IGZhbHNlXG4pID0+ICh7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cbiAgICAuLi4oc2hvdWxkU2VuZERhdGVGcm9tKGRhdGVfZnJvbSwgc2hvdWxkX2xvYWRfcGFydGlhbGx5LCBwYXJ0aWFsX2ZldGNoX3RpbWUsIGRhdGVfdG8pICYmIHtcbiAgICAgICAgZGF0ZV9mcm9tOiBnZXREYXRlRnJvbShzaG91bGRfbG9hZF9wYXJ0aWFsbHksIHBhcnRpYWxfZmV0Y2hfdGltZSwgZGF0ZV9mcm9tLCBkYXRlX3RvKSxcbiAgICB9KSxcbiAgICAuLi4oKGRhdGVfdG8gfHwgc2hvdWxkX2xvYWRfcGFydGlhbGx5KSAmJiB7IGRhdGVfdG86IGdldERhdGVUbyhkYXRlX3RvKSB9KSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBnZXREYXRlQm91bmRhcmllcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../reports/src/Stores/Modules/Profit/Helpers/format-request.ts\n");

/***/ }),

/***/ "../../reports/src/Stores/Modules/Profit/Helpers/format-response.ts":
/*!**************************************************************************!*\
  !*** ../../reports/src/Stores/Modules/Profit/Helpers/format-response.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatProfitTableTransactions: () => (/* binding */ formatProfitTableTransactions)\n/* harmony export */ });\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\nconst formatProfitTableTransactions = function (transaction, currency) {\n  var _transaction$payout, _transaction$sell_pri, _transaction$buy_pric, _transaction$shortcod;\n  let active_symbols = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  const format_string = 'DD MMM YYYY HH:mm:ss';\n  const purchase_time = transaction.purchase_time && `${(0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.toMoment)(Number(transaction.purchase_time)).format(format_string)}`;\n  const purchase_time_unix = transaction.purchase_time;\n  const sell_time = transaction.sell_time && `${(0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.toMoment)(Number(transaction.sell_time)).format(format_string)}`;\n  const payout = (_transaction$payout = transaction.payout) !== null && _transaction$payout !== void 0 ? _transaction$payout : NaN;\n  const sell_price = (_transaction$sell_pri = transaction.sell_price) !== null && _transaction$sell_pri !== void 0 ? _transaction$sell_pri : NaN;\n  const buy_price = (_transaction$buy_pric = transaction.buy_price) !== null && _transaction$buy_pric !== void 0 ? _transaction$buy_pric : NaN;\n  const profit_loss = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.formatMoney)(currency, Number(sell_price - buy_price), true);\n  const display_name = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.getSymbolDisplayName)(active_symbols, (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.getMarketInformation)((_transaction$shortcod = transaction.shortcode) !== null && _transaction$shortcod !== void 0 ? _transaction$shortcod : '').underlying);\n  return _objectSpread(_objectSpread({}, transaction), {\n    payout,\n    sell_price,\n    buy_price,\n    profit_loss,\n    sell_time,\n    purchase_time,\n    display_name,\n    purchase_time_unix\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vcmVwb3J0cy9zcmMvU3RvcmVzL01vZHVsZXMvUHJvZml0L0hlbHBlcnMvZm9ybWF0LXJlc3BvbnNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUtBO0FBSUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vcmVwb3J0cy9zcmMvU3RvcmVzL01vZHVsZXMvUHJvZml0L0hlbHBlcnMvZm9ybWF0LXJlc3BvbnNlLnRzP2I1ZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZm9ybWF0TW9uZXksIHRvTW9tZW50LCBnZXRTeW1ib2xEaXNwbGF5TmFtZSwgZ2V0TWFya2V0SW5mb3JtYXRpb24gfSBmcm9tICdAZGVyaXYvc2hhcmVkJztcbmltcG9ydCB7IEFjdGl2ZVN5bWJvbHMsIFByb2ZpdFRhYmxlIH0gZnJvbSAnQGRlcml2L2FwaS10eXBlcyc7XG5cbmV4cG9ydCB0eXBlIFRUcmFuc2FjdGlvbiA9IE5vbk51bGxhYmxlPE5vbk51bGxhYmxlPFByb2ZpdFRhYmxlPlsndHJhbnNhY3Rpb25zJ10+W251bWJlcl07XG5cbmV4cG9ydCBjb25zdCBmb3JtYXRQcm9maXRUYWJsZVRyYW5zYWN0aW9ucyA9IChcbiAgICB0cmFuc2FjdGlvbjogVFRyYW5zYWN0aW9uLFxuICAgIGN1cnJlbmN5OiBzdHJpbmcsXG4gICAgYWN0aXZlX3N5bWJvbHM6IEFjdGl2ZVN5bWJvbHMgPSBbXVxuKSA9PiB7XG4gICAgY29uc3QgZm9ybWF0X3N0cmluZyA9ICdERCBNTU0gWVlZWSBISDptbTpzcyc7XG4gICAgY29uc3QgcHVyY2hhc2VfdGltZSA9XG4gICAgICAgIHRyYW5zYWN0aW9uLnB1cmNoYXNlX3RpbWUgJiYgYCR7dG9Nb21lbnQoTnVtYmVyKHRyYW5zYWN0aW9uLnB1cmNoYXNlX3RpbWUpKS5mb3JtYXQoZm9ybWF0X3N0cmluZyl9YDtcbiAgICBjb25zdCBwdXJjaGFzZV90aW1lX3VuaXggPSB0cmFuc2FjdGlvbi5wdXJjaGFzZV90aW1lO1xuICAgIGNvbnN0IHNlbGxfdGltZSA9IHRyYW5zYWN0aW9uLnNlbGxfdGltZSAmJiBgJHt0b01vbWVudChOdW1iZXIodHJhbnNhY3Rpb24uc2VsbF90aW1lKSkuZm9ybWF0KGZvcm1hdF9zdHJpbmcpfWA7XG4gICAgY29uc3QgcGF5b3V0ID0gdHJhbnNhY3Rpb24ucGF5b3V0ID8/IE5hTjtcbiAgICBjb25zdCBzZWxsX3ByaWNlID0gdHJhbnNhY3Rpb24uc2VsbF9wcmljZSA/PyBOYU47XG4gICAgY29uc3QgYnV5X3ByaWNlID0gdHJhbnNhY3Rpb24uYnV5X3ByaWNlID8/IE5hTjtcbiAgICBjb25zdCBwcm9maXRfbG9zcyA9IGZvcm1hdE1vbmV5KGN1cnJlbmN5LCBOdW1iZXIoc2VsbF9wcmljZSAtIGJ1eV9wcmljZSksIHRydWUpO1xuICAgIGNvbnN0IGRpc3BsYXlfbmFtZSA9IGdldFN5bWJvbERpc3BsYXlOYW1lKFxuICAgICAgICBhY3RpdmVfc3ltYm9scyxcbiAgICAgICAgZ2V0TWFya2V0SW5mb3JtYXRpb24odHJhbnNhY3Rpb24uc2hvcnRjb2RlID8/ICcnKS51bmRlcmx5aW5nXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIC4uLnRyYW5zYWN0aW9uLFxuICAgICAgICAuLi57XG4gICAgICAgICAgICBwYXlvdXQsXG4gICAgICAgICAgICBzZWxsX3ByaWNlLFxuICAgICAgICAgICAgYnV5X3ByaWNlLFxuICAgICAgICAgICAgcHJvZml0X2xvc3MsXG4gICAgICAgICAgICBzZWxsX3RpbWUsXG4gICAgICAgICAgICBwdXJjaGFzZV90aW1lLFxuICAgICAgICAgICAgZGlzcGxheV9uYW1lLFxuICAgICAgICAgICAgcHVyY2hhc2VfdGltZV91bml4LFxuICAgICAgICB9LFxuICAgIH07XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../reports/src/Stores/Modules/Profit/Helpers/format-response.ts\n");

/***/ }),

/***/ "../../reports/src/Stores/Modules/Profit/profit-store.js":
/*!***************************************************************!*\
  !*** ../../reports/src/Stores/Modules/Profit/profit-store.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ProfitTableStore)\n/* harmony export */ });\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash.debounce */ \"../../../node_modules/lodash.debounce/index.js\");\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_debounce__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! mobx */ \"../../../node_modules/mobx/dist/mobx.esm.js\");\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\");\n/* harmony import */ var _Helpers_format_request__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Helpers/format-request */ \"../../reports/src/Stores/Modules/Profit/Helpers/format-request.ts\");\n/* harmony import */ var _Helpers_format_response__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Helpers/format-response */ \"../../reports/src/Stores/Modules/Profit/Helpers/format-response.ts\");\n/* harmony import */ var _base_store__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../base-store */ \"../../reports/src/Stores/base-store.js\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\n\n\n\n\nconst batch_size = 50;\nconst delay_on_scroll_time = 150;\nclass ProfitTableStore extends _base_store__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\n  constructor(_ref) {\n    let {\n      root_store\n    } = _ref;\n    // TODO: [mobx-undecorate] verify the constructor arguments and the arguments of this automatically generated super call\n    super({\n      root_store\n    });\n    this.data = [];\n    this.date_from = null;\n    this.date_to = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.toMoment)().startOf('day').add(1, 'd').subtract(1, 's').unix();\n    this.error = '';\n    this.has_loaded_all = false;\n    this.is_loading = true;\n    this.filtered_date_range = void 0;\n    // `client_loginid` is only used to detect if this is in sync with the client-store, don't rely on\n    // this for calculations. Use the client.currency instead.\n    this.client_loginid = '';\n    this.fetchOnScroll = lodash_debounce__WEBPACK_IMPORTED_MODULE_0___default()((left, shouldFilterContractTypes) => {\n      if (left < 1500) {\n        this.fetchNextBatch(shouldFilterContractTypes);\n      }\n    }, delay_on_scroll_time);\n    (0,mobx__WEBPACK_IMPORTED_MODULE_5__.makeObservable)(this, {\n      data: mobx__WEBPACK_IMPORTED_MODULE_5__.observable,\n      date_from: mobx__WEBPACK_IMPORTED_MODULE_5__.observable,\n      date_to: mobx__WEBPACK_IMPORTED_MODULE_5__.observable,\n      error: mobx__WEBPACK_IMPORTED_MODULE_5__.observable,\n      has_loaded_all: mobx__WEBPACK_IMPORTED_MODULE_5__.observable,\n      is_loading: mobx__WEBPACK_IMPORTED_MODULE_5__.observable,\n      filtered_date_range: mobx__WEBPACK_IMPORTED_MODULE_5__.observable,\n      client_loginid: mobx__WEBPACK_IMPORTED_MODULE_5__.observable,\n      is_empty: mobx__WEBPACK_IMPORTED_MODULE_5__.computed,\n      has_selected_date: mobx__WEBPACK_IMPORTED_MODULE_5__.computed,\n      fetchNextBatch: mobx__WEBPACK_IMPORTED_MODULE_5__.action.bound,\n      profitTableResponseHandler: mobx__WEBPACK_IMPORTED_MODULE_5__.action.bound,\n      handleScroll: mobx__WEBPACK_IMPORTED_MODULE_5__.action.bound,\n      networkStatusChangeListener: mobx__WEBPACK_IMPORTED_MODULE_5__.action.bound,\n      onMount: mobx__WEBPACK_IMPORTED_MODULE_5__.action.bound,\n      onUnmount: mobx__WEBPACK_IMPORTED_MODULE_5__.override,\n      totals: mobx__WEBPACK_IMPORTED_MODULE_5__.computed,\n      accountSwitcherListener: mobx__WEBPACK_IMPORTED_MODULE_5__.action.bound,\n      clearTable: mobx__WEBPACK_IMPORTED_MODULE_5__.action.bound,\n      clearDateFilter: mobx__WEBPACK_IMPORTED_MODULE_5__.action.bound,\n      handleDateChange: mobx__WEBPACK_IMPORTED_MODULE_5__.action.bound\n    });\n  }\n  get is_empty() {\n    return !this.is_loading && this.data.length === 0;\n  }\n  get has_selected_date() {\n    return !!(this.date_from || this.date_to);\n  }\n  shouldFetchNextBatch(is_mounting) {\n    return !!is_mounting || !this.has_loaded_all && !this.is_loading;\n  }\n  async fetchNextBatch(shouldFilterContractTypes, isMounting) {\n    var _this$root_store$modu, _this$root_store$modu2;\n    if (!this.shouldFetchNextBatch(isMounting)) return;\n    this.is_loading = true;\n    const dateParams = (0,_Helpers_format_request__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this.date_from, this.date_to, 0, false);\n    const params = shouldFilterContractTypes ? _objectSpread(_objectSpread({}, (0,_Helpers_format_request__WEBPACK_IMPORTED_MODULE_2__[\"default\"])((_this$root_store$modu = this.root_store.modules.positions) === null || _this$root_store$modu === void 0 ? void 0 : _this$root_store$modu.dateFrom, (_this$root_store$modu2 = this.root_store.modules.positions) === null || _this$root_store$modu2 === void 0 ? void 0 : _this$root_store$modu2.dateTo, 0, false)), {}, {\n      contract_type: this.root_store.modules.positions.filteredContractTypes\n    }) : dateParams;\n    const response = await _deriv_shared__WEBPACK_IMPORTED_MODULE_1__.WS.profitTable(batch_size, this.data.length, params);\n    this.profitTableResponseHandler(response);\n  }\n  profitTableResponseHandler(response) {\n    if ('error' in response) {\n      this.error = response.error.message;\n      return;\n    }\n    const formatted_transactions = response.profit_table.transactions.map(transaction => (0,_Helpers_format_response__WEBPACK_IMPORTED_MODULE_3__.formatProfitTableTransactions)(transaction, this.root_store.client.currency, this.root_store.active_symbols.active_symbols)).filter(_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.filterDisabledPositions);\n    this.data = [...this.data, ...formatted_transactions];\n    this.has_loaded_all = formatted_transactions.length < batch_size;\n    this.is_loading = false;\n  }\n  handleScroll(event, shouldFilterContractTypes) {\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight\n    } = event.target;\n    const left_to_scroll = scrollHeight - (scrollTop + clientHeight);\n    this.fetchOnScroll(left_to_scroll, shouldFilterContractTypes);\n  }\n  networkStatusChangeListener(is_online) {\n    this.is_loading = this.is_loading || !is_online;\n  }\n  async onMount(shouldFilterContractTypes) {\n    this.assertHasValidCache(this.client_loginid, this.clearDateFilter, _deriv_shared__WEBPACK_IMPORTED_MODULE_1__.WS.forgetAll.bind(null, 'proposal'));\n    this.client_loginid = this.root_store.client.loginid;\n    this.onSwitchAccount(this.accountSwitcherListener);\n    this.onNetworkStatusChange(this.networkStatusChangeListener);\n    await _deriv_shared__WEBPACK_IMPORTED_MODULE_1__.WS.wait('authorize');\n\n    /* Caching won't work for profit_table because date filtering happens based on `buy_time` of a contract.\n    If we already have a cache for a period and if we sell a contract that was purchased in that period\n    then the sold contract won't be there in profit_table when visited again unless we fetch it again.\n    Caching will only work if the date filtering happens based on `sell_time` of a contract in BE. */\n    this.fetchNextBatch(shouldFilterContractTypes, true);\n  }\n\n  /* DO NOT call clearDateFilter() upon unmounting the component, date filters should stay\n  as we change tab or click on any contract for later references as discussed with UI/UX and QA */\n  onUnmount() {\n    this.disposeSwitchAccount();\n    _deriv_shared__WEBPACK_IMPORTED_MODULE_1__.WS.forgetAll('proposal');\n  }\n  get totals() {\n    let profit_loss = 0;\n    this.data.forEach(transaction => {\n      profit_loss += parseFloat(transaction.profit_loss.replace(/,/g, ''));\n    });\n    return {\n      profit_loss: profit_loss.toString()\n    };\n  }\n  accountSwitcherListener() {\n    return new Promise(resolve => {\n      this.clearTable();\n      this.clearDateFilter();\n      return resolve(this.fetchNextBatch());\n    });\n  }\n  clearTable() {\n    this.data = [];\n    this.has_loaded_all = false;\n    this.is_loading = false;\n  }\n  clearDateFilter() {\n    this.date_from = null;\n    this.date_to = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.toMoment)().startOf('day').add(1, 'd').subtract(1, 's').unix();\n  }\n  handleDateChange(date_values) {\n    let {\n      date_range,\n      shouldFilterContractTypes\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      from,\n      to,\n      is_batch\n    } = date_values;\n    this.filtered_date_range = date_range;\n    if (from) {\n      this.date_from = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.toMoment)(from).unix();\n    } else if (is_batch) {\n      this.date_from = null;\n    }\n    if (to) this.date_to = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.toMoment)(to).unix();\n    if (shouldFilterContractTypes) {\n      this.root_store.modules.positions.setDateFrom(this.date_from);\n      this.root_store.modules.positions.setDateTo(this.date_to);\n    }\n    this.clearTable();\n    this.fetchNextBatch(shouldFilterContractTypes);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../reports/src/Stores/Modules/Profit/profit-store.js\n");

/***/ }),

/***/ "../../reports/src/Stores/Modules/Statement/Helpers/format-response.ts":
/*!*****************************************************************************!*\
  !*** ../../reports/src/Stores/Modules/Statement/Helpers/format-response.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatStatementTransaction: () => (/* binding */ formatStatementTransaction)\n/* harmony export */ });\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\");\n/* harmony import */ var _deriv_translations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\nconst formatStatementTransaction = function (transaction, currency) {\n  var _transaction$payout, _transaction$amount, _transaction$balance_;\n  let active_symbols = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  const {\n    action_type,\n    app_id,\n    contract_id,\n    longcode,\n    purchase_time,\n    withdrawal_details\n  } = transaction;\n  const format_string = 'DD MMM YYYY HH:mm:ss';\n  const transaction_time = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.toMoment)(transaction.transaction_time).format(format_string);\n  const payout = (_transaction$payout = transaction.payout) !== null && _transaction$payout !== void 0 ? _transaction$payout : NaN;\n  const amount = (_transaction$amount = transaction.amount) !== null && _transaction$amount !== void 0 ? _transaction$amount : NaN;\n  const balance = (_transaction$balance_ = transaction.balance_after) !== null && _transaction$balance_ !== void 0 ? _transaction$balance_ : NaN;\n  const should_exclude_currency = true;\n  const shortcode = ['buy', 'sell'].includes(action_type !== null && action_type !== void 0 ? action_type : '') ? transaction.shortcode : null;\n  const display_name = shortcode ? (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.getSymbolDisplayName)(active_symbols, (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.getMarketInformation)(shortcode).underlying) : '';\n  return _objectSpread({\n    action: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)((0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.toTitleCase)(action_type !== null && action_type !== void 0 ? action_type : '')),\n    // 'Buy', 'Sell', 'Deposit', 'Withdrawal'\n    date: transaction_time,\n    display_name,\n    refid: transaction.transaction_id,\n    payout: isNaN(payout) ? '-' : (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.formatMoney)(currency, payout, should_exclude_currency),\n    amount: isNaN(amount) ? '-' : (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.formatMoney)(currency, amount, should_exclude_currency),\n    balance: isNaN(balance) ? '-' : (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.formatMoney)(currency, balance, should_exclude_currency),\n    desc: longcode === null || longcode === void 0 ? void 0 : longcode.replace(/\\n/g, '<br />'),\n    id: contract_id,\n    app_id,\n    shortcode,\n    action_type,\n    purchase_time,\n    transaction_time: transaction.transaction_time\n  }, withdrawal_details && {\n    withdrawal_details,\n    longcode\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vcmVwb3J0cy9zcmMvU3RvcmVzL01vZHVsZXMvU3RhdGVtZW50L0hlbHBlcnMvZm9ybWF0LXJlc3BvbnNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUdBO0FBSUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uLy4uL3JlcG9ydHMvc3JjL1N0b3Jlcy9Nb2R1bGVzL1N0YXRlbWVudC9IZWxwZXJzL2Zvcm1hdC1yZXNwb25zZS50cz8xYzM5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvcm1hdE1vbmV5LCB0b1RpdGxlQ2FzZSwgdG9Nb21lbnQsIGdldE1hcmtldEluZm9ybWF0aW9uLCBnZXRTeW1ib2xEaXNwbGF5TmFtZSB9IGZyb20gJ0BkZXJpdi9zaGFyZWQnO1xuaW1wb3J0IHsgbG9jYWxpemUgfSBmcm9tICdAZGVyaXYvdHJhbnNsYXRpb25zJztcbmltcG9ydCB7IEFjdGl2ZVN5bWJvbHMsIFN0YXRlbWVudCB9IGZyb20gJ0BkZXJpdi9hcGktdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgZm9ybWF0U3RhdGVtZW50VHJhbnNhY3Rpb24gPSAoXG4gICAgdHJhbnNhY3Rpb246IE5vbk51bGxhYmxlPFN0YXRlbWVudFsndHJhbnNhY3Rpb25zJ10+W251bWJlcl0sXG4gICAgY3VycmVuY3k6IHN0cmluZyxcbiAgICBhY3RpdmVfc3ltYm9sczogQWN0aXZlU3ltYm9scyA9IFtdXG4pID0+IHtcbiAgICBjb25zdCB7IGFjdGlvbl90eXBlLCBhcHBfaWQsIGNvbnRyYWN0X2lkLCBsb25nY29kZSwgcHVyY2hhc2VfdGltZSwgd2l0aGRyYXdhbF9kZXRhaWxzIH0gPSB0cmFuc2FjdGlvbjtcbiAgICBjb25zdCBmb3JtYXRfc3RyaW5nID0gJ0REIE1NTSBZWVlZIEhIOm1tOnNzJztcbiAgICBjb25zdCB0cmFuc2FjdGlvbl90aW1lID0gdG9Nb21lbnQodHJhbnNhY3Rpb24udHJhbnNhY3Rpb25fdGltZSkuZm9ybWF0KGZvcm1hdF9zdHJpbmcpO1xuICAgIGNvbnN0IHBheW91dCA9IHRyYW5zYWN0aW9uLnBheW91dCA/PyBOYU47XG4gICAgY29uc3QgYW1vdW50ID0gdHJhbnNhY3Rpb24uYW1vdW50ID8/IE5hTjtcbiAgICBjb25zdCBiYWxhbmNlID0gdHJhbnNhY3Rpb24uYmFsYW5jZV9hZnRlciA/PyBOYU47XG4gICAgY29uc3Qgc2hvdWxkX2V4Y2x1ZGVfY3VycmVuY3kgPSB0cnVlO1xuICAgIGNvbnN0IHNob3J0Y29kZSA9IFsnYnV5JywgJ3NlbGwnXS5pbmNsdWRlcyhhY3Rpb25fdHlwZSA/PyAnJykgPyB0cmFuc2FjdGlvbi5zaG9ydGNvZGUgOiBudWxsO1xuICAgIGNvbnN0IGRpc3BsYXlfbmFtZSA9IHNob3J0Y29kZVxuICAgICAgICA/IGdldFN5bWJvbERpc3BsYXlOYW1lKGFjdGl2ZV9zeW1ib2xzLCBnZXRNYXJrZXRJbmZvcm1hdGlvbihzaG9ydGNvZGUpLnVuZGVybHlpbmcpXG4gICAgICAgIDogJyc7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBhY3Rpb246IGxvY2FsaXplKHRvVGl0bGVDYXNlKGFjdGlvbl90eXBlID8/ICcnKSksIC8vICdCdXknLCAnU2VsbCcsICdEZXBvc2l0JywgJ1dpdGhkcmF3YWwnXG4gICAgICAgIGRhdGU6IHRyYW5zYWN0aW9uX3RpbWUsXG4gICAgICAgIGRpc3BsYXlfbmFtZSxcbiAgICAgICAgcmVmaWQ6IHRyYW5zYWN0aW9uLnRyYW5zYWN0aW9uX2lkLFxuICAgICAgICBwYXlvdXQ6IGlzTmFOKHBheW91dCkgPyAnLScgOiBmb3JtYXRNb25leShjdXJyZW5jeSwgcGF5b3V0LCBzaG91bGRfZXhjbHVkZV9jdXJyZW5jeSksXG4gICAgICAgIGFtb3VudDogaXNOYU4oYW1vdW50KSA/ICctJyA6IGZvcm1hdE1vbmV5KGN1cnJlbmN5LCBhbW91bnQsIHNob3VsZF9leGNsdWRlX2N1cnJlbmN5KSxcbiAgICAgICAgYmFsYW5jZTogaXNOYU4oYmFsYW5jZSkgPyAnLScgOiBmb3JtYXRNb25leShjdXJyZW5jeSwgYmFsYW5jZSwgc2hvdWxkX2V4Y2x1ZGVfY3VycmVuY3kpLFxuICAgICAgICBkZXNjOiBsb25nY29kZT8ucmVwbGFjZSgvXFxuL2csICc8YnIgLz4nKSxcbiAgICAgICAgaWQ6IGNvbnRyYWN0X2lkLFxuICAgICAgICBhcHBfaWQsXG4gICAgICAgIHNob3J0Y29kZSxcbiAgICAgICAgYWN0aW9uX3R5cGUsXG4gICAgICAgIHB1cmNoYXNlX3RpbWUsXG4gICAgICAgIHRyYW5zYWN0aW9uX3RpbWU6IHRyYW5zYWN0aW9uLnRyYW5zYWN0aW9uX3RpbWUsXG4gICAgICAgIC4uLih3aXRoZHJhd2FsX2RldGFpbHMgJiYge1xuICAgICAgICAgICAgd2l0aGRyYXdhbF9kZXRhaWxzLFxuICAgICAgICAgICAgbG9uZ2NvZGUsXG4gICAgICAgIH0pLFxuICAgIH07XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../reports/src/Stores/Modules/Statement/Helpers/format-response.ts\n");

/***/ }),

/***/ "../../reports/src/Stores/Modules/Statement/statement-store.js":
/*!*********************************************************************!*\
  !*** ../../reports/src/Stores/Modules/Statement/statement-store.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ StatementStore)\n/* harmony export */ });\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash.debounce */ \"../../../node_modules/lodash.debounce/index.js\");\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_debounce__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! mobx */ \"../../../node_modules/mobx/dist/mobx.esm.js\");\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\");\n/* harmony import */ var _Helpers_format_response__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Helpers/format-response */ \"../../reports/src/Stores/Modules/Statement/Helpers/format-response.ts\");\n/* harmony import */ var _Profit_Helpers_format_request__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Profit/Helpers/format-request */ \"../../reports/src/Stores/Modules/Profit/Helpers/format-request.ts\");\n/* harmony import */ var _base_store__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../base-store */ \"../../reports/src/Stores/base-store.js\");\n\n\n\n\n\n\nconst batch_size = 100; // request response limit\nconst delay_on_scroll_time = 150; // fetch debounce delay on scroll\n\nclass StatementStore extends _base_store__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\n  constructor(_ref) {\n    let {\n      root_store\n    } = _ref;\n    // TODO: [mobx-undecorate] verify the constructor arguments and the arguments of this automatically generated super call\n    super({\n      root_store\n    });\n    this.data = [];\n    this.is_loading = true;\n    this.has_loaded_all = false;\n    this.date_from = null;\n    this.date_to = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.toMoment)().startOf('day').add(1, 'd').subtract(1, 's').unix();\n    this.error = '';\n    this.action_type = 'all';\n    this.filtered_date_range = void 0;\n    // `client_loginid` is only used to detect if this is in sync with the client-store, don't rely on\n    // this for calculations. Use the client.currency instead.\n    this.client_loginid = '';\n    this.account_statistics = {};\n    this.fetchOnScroll = lodash_debounce__WEBPACK_IMPORTED_MODULE_0___default()(left => {\n      if (left < 1500) {\n        this.fetchNextBatch();\n      }\n    }, delay_on_scroll_time);\n    (0,mobx__WEBPACK_IMPORTED_MODULE_5__.makeObservable)(this, {\n      data: mobx__WEBPACK_IMPORTED_MODULE_5__.observable,\n      is_loading: mobx__WEBPACK_IMPORTED_MODULE_5__.observable,\n      has_loaded_all: mobx__WEBPACK_IMPORTED_MODULE_5__.observable,\n      date_from: mobx__WEBPACK_IMPORTED_MODULE_5__.observable,\n      date_to: mobx__WEBPACK_IMPORTED_MODULE_5__.observable,\n      error: mobx__WEBPACK_IMPORTED_MODULE_5__.observable,\n      action_type: mobx__WEBPACK_IMPORTED_MODULE_5__.observable,\n      filtered_date_range: mobx__WEBPACK_IMPORTED_MODULE_5__.observable,\n      client_loginid: mobx__WEBPACK_IMPORTED_MODULE_5__.observable,\n      account_statistics: mobx__WEBPACK_IMPORTED_MODULE_5__.observable,\n      is_empty: mobx__WEBPACK_IMPORTED_MODULE_5__.computed,\n      has_selected_date: mobx__WEBPACK_IMPORTED_MODULE_5__.computed,\n      clearTable: mobx__WEBPACK_IMPORTED_MODULE_5__.action.bound,\n      clearDateFilter: mobx__WEBPACK_IMPORTED_MODULE_5__.action.bound,\n      fetchNextBatch: mobx__WEBPACK_IMPORTED_MODULE_5__.action.bound,\n      statementHandler: mobx__WEBPACK_IMPORTED_MODULE_5__.action.bound,\n      handleDateChange: mobx__WEBPACK_IMPORTED_MODULE_5__.action.bound,\n      handleFilterChange: mobx__WEBPACK_IMPORTED_MODULE_5__.action.bound,\n      handleScroll: mobx__WEBPACK_IMPORTED_MODULE_5__.action.bound,\n      accountSwitcherListener: mobx__WEBPACK_IMPORTED_MODULE_5__.action.bound,\n      networkStatusChangeListener: mobx__WEBPACK_IMPORTED_MODULE_5__.action.bound,\n      onMount: mobx__WEBPACK_IMPORTED_MODULE_5__.action.bound,\n      onUnmount: mobx__WEBPACK_IMPORTED_MODULE_5__.override\n    });\n  }\n  get is_empty() {\n    return !this.is_loading && this.data.length === 0;\n  }\n  get has_selected_date() {\n    return !!(this.date_from || this.date_to);\n  }\n  clearTable() {\n    this.data = [];\n    this.has_loaded_all = false;\n    this.is_loading = false;\n  }\n  clearDateFilter() {\n    this.date_from = null;\n    this.date_to = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.toMoment)().startOf('day').add(1, 'd').subtract(1, 's').unix();\n    this.partial_fetch_time = 0;\n  }\n  shouldFetchNextBatch(should_load_partially) {\n    if (!should_load_partially && (this.has_loaded_all || this.is_loading)) return false;\n    const today = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.toMoment)().startOf('day').add(1, 'd').subtract(1, 's').unix();\n    if (this.date_to < today) return !should_load_partially && this.partial_fetch_time;\n    return true;\n  }\n  async fetchNextBatch() {\n    let should_load_partially = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!this.shouldFetchNextBatch(should_load_partially)) return;\n    this.is_loading = true;\n    const optional_arguments = (0,_Profit_Helpers_format_request__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this.date_from, this.date_to, this.partial_fetch_time, should_load_partially);\n    if (this.action_type !== 'all') {\n      optional_arguments.action_type = this.action_type;\n    }\n    const response = await _deriv_shared__WEBPACK_IMPORTED_MODULE_1__.WS.statement(batch_size, !should_load_partially ? this.data.length : undefined, optional_arguments);\n    this.statementHandler(response, should_load_partially);\n  }\n  statementHandler(response, should_load_partially) {\n    if ('error' in response) {\n      this.error = response.error.message;\n      return;\n    }\n    const formatted_transactions = response.statement.transactions.map(transaction => (0,_Helpers_format_response__WEBPACK_IMPORTED_MODULE_2__.formatStatementTransaction)(transaction, this.root_store.client.currency, this.root_store.active_symbols.active_symbols)).filter(_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.filterDisabledPositions);\n    if (should_load_partially) {\n      this.data = [...formatted_transactions, ...this.data];\n    } else {\n      this.data = [...this.data, ...formatted_transactions];\n    }\n    this.has_loaded_all = !should_load_partially && formatted_transactions.length < batch_size;\n    this.is_loading = false;\n    if (formatted_transactions.length > 0) {\n      this.partial_fetch_time = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.toMoment)().unix();\n    }\n  }\n  handleDateChange(date_values) {\n    let {\n      date_range\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      from,\n      to,\n      is_batch\n    } = date_values;\n    this.filtered_date_range = date_range;\n    if (from) {\n      this.date_from = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.toMoment)(from).unix();\n    } else if (is_batch) {\n      this.date_from = null;\n    }\n    if (to) this.date_to = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.toMoment)(to).unix();\n    this.clearTable();\n    this.fetchNextBatch();\n  }\n  handleFilterChange() {\n    let filterValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.action_type = filterValue;\n    this.clearTable();\n    this.fetchNextBatch();\n  }\n  handleScroll(event) {\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight\n    } = event.target;\n    const left_to_scroll = scrollHeight - (scrollTop + clientHeight);\n    this.fetchOnScroll(left_to_scroll);\n  }\n  accountSwitcherListener() {\n    return new Promise(resolve => {\n      this.clearTable();\n      this.clearDateFilter();\n      return resolve(this.fetchNextBatch());\n    });\n  }\n  networkStatusChangeListener(is_online) {\n    this.is_loading = this.is_loading || !is_online;\n  }\n  async onMount() {\n    this.assertHasValidCache(this.client_loginid, this.clearDateFilter, this.client_loginid ? this.clearTable : () => null, _deriv_shared__WEBPACK_IMPORTED_MODULE_1__.WS.forgetAll.bind(null, 'proposal'));\n    this.client_loginid = this.root_store.client.loginid;\n    this.onSwitchAccount(this.accountSwitcherListener);\n    this.onNetworkStatusChange(this.networkStatusChangeListener);\n    await _deriv_shared__WEBPACK_IMPORTED_MODULE_1__.WS.wait('authorize');\n    this.fetchNextBatch(true);\n  }\n\n  /* DO NOT call clearDateFilter() upon unmounting the component, date filters should stay\n  as we change tab or click on any contract for later references as discussed with UI/UX and QA */\n  onUnmount() {\n    this.disposeSwitchAccount();\n    _deriv_shared__WEBPACK_IMPORTED_MODULE_1__.WS.forgetAll('proposal');\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../reports/src/Stores/Modules/Statement/statement-store.js\n");

/***/ }),

/***/ "../../reports/src/Stores/base-store.js":
/*!**********************************************!*\
  !*** ../../reports/src/Stores/base-store.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BaseStore)\n/* harmony export */ });\n/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mobx */ \"../../../node_modules/mobx/dist/mobx.esm.js\");\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\n\n/**\n * BaseStore class is the base class for all defined stores in the application. It handles some stuff such as:\n *  1. Creating snapshot object from the store.\n *  2. Saving the store's snapshot in local/session storage and keeping them in sync.\n */\nclass BaseStore {\n  /**\n   * Constructor of the base class that gets properties' name of child which should be saved in storages\n   *\n   * @param {Object} options - An object that contains the following properties:\n   *     @property {Object}   root_store - An object that contains the root store of the app.\n   *     @property {String[]} local_storage_properties - A list of properties' names that should be kept in localStorage.\n   *     @property {String[]} session_storage_properties - A list of properties' names that should be kept in sessionStorage.\n   *     @property {Object}   validation_rules - An object that contains the validation rules for each property of the store.\n   *     @property {String}   store_name - Explicit store name for browser application storage (to bypass minification)\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.validation_errors = {};\n    this.validation_rules = {};\n    this.preSwitchAccountDisposer = null;\n    this.pre_switch_account_listener = null;\n    this.switchAccountDisposer = null;\n    this.switch_account_listener = null;\n    this.logoutDisposer = null;\n    this.logout_listener = null;\n    this.clientInitDisposer = null;\n    this.client_init_listener = null;\n    this.networkStatusChangeDisposer = null;\n    this.network_status_change_listener = null;\n    this.themeChangeDisposer = null;\n    this.theme_change_listener = null;\n    this.realAccountSignupEndedDisposer = null;\n    this.real_account_signup_ended_listener = null;\n    this.partial_fetch_time = 0;\n    (0,mobx__WEBPACK_IMPORTED_MODULE_1__.makeObservable)(this, {\n      validation_errors: mobx__WEBPACK_IMPORTED_MODULE_1__.observable,\n      validation_rules: mobx__WEBPACK_IMPORTED_MODULE_1__.observable,\n      partial_fetch_time: mobx__WEBPACK_IMPORTED_MODULE_1__.observable,\n      retrieveFromStorage: mobx__WEBPACK_IMPORTED_MODULE_1__.action,\n      setValidationErrorMessages: mobx__WEBPACK_IMPORTED_MODULE_1__.action,\n      setValidationRules: mobx__WEBPACK_IMPORTED_MODULE_1__.action,\n      addRule: mobx__WEBPACK_IMPORTED_MODULE_1__.action,\n      validateProperty: mobx__WEBPACK_IMPORTED_MODULE_1__.action,\n      validateAllProperties: mobx__WEBPACK_IMPORTED_MODULE_1__.action,\n      onSwitchAccount: mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound,\n      onPreSwitchAccount: mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound,\n      onLogout: mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound,\n      onClientInit: mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound,\n      onNetworkStatusChange: mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound,\n      onThemeChange: mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound,\n      onRealAccountSignupEnd: mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound,\n      disposePreSwitchAccount: mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound,\n      disposeSwitchAccount: mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound,\n      disposeLogout: mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound,\n      disposeClientInit: mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound,\n      disposeNetworkStatusChange: mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound,\n      disposeThemeChange: mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound,\n      disposeRealAccountSignupEnd: mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound,\n      onUnmount: mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound,\n      assertHasValidCache: mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound\n    });\n    const {\n      root_store,\n      local_storage_properties,\n      session_storage_properties,\n      validation_rules,\n      store_name\n    } = options;\n    Object.defineProperty(this, 'root_store', {\n      enumerable: false,\n      writable: true\n    });\n    Object.defineProperty(this, 'local_storage_properties', {\n      enumerable: false,\n      writable: true\n    });\n    Object.defineProperty(this, 'session_storage_properties', {\n      enumerable: false,\n      writable: true\n    });\n    const has_local_or_session_storage = local_storage_properties && local_storage_properties.length || session_storage_properties && session_storage_properties.length;\n    if (has_local_or_session_storage) {\n      if (!store_name) {\n        throw new Error('store_name is required for local/session storage');\n      }\n      Object.defineProperty(this, 'store_name', {\n        value: store_name,\n        enumerable: false,\n        writable: false\n      });\n    }\n    this.root_store = root_store;\n    this.local_storage_properties = local_storage_properties || [];\n    this.session_storage_properties = session_storage_properties || [];\n    setTimeout(() => {\n      this.setValidationRules(validation_rules);\n      this.setupReactionForLocalStorage();\n      this.setupReactionForSessionStorage();\n      this.retrieveFromStorage();\n    }, 0);\n  }\n\n  /**\n   * Returns an snapshot of the current store\n   *\n   * @param {String[]} properties - A list of properties' names that should be in the snapshot.\n   *\n   * @return {Object} Returns a cloned object of the store.\n   */\n  getSnapshot(properties) {\n    let snapshot = (0,mobx__WEBPACK_IMPORTED_MODULE_1__.toJS)(this);\n    if (!(0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.isEmptyObject)(this.root_store)) {\n      snapshot.root_store = this.root_store;\n    }\n    if (properties && properties.length) {\n      snapshot = properties.reduce((result, p) => Object.assign(result, {\n        [p]: snapshot[p]\n      }), {});\n    }\n    return snapshot;\n  }\n\n  /**\n   * Sets up a reaction on properties which are mentioned in `local_storage_properties`\n   *  and invokes `saveToStorage` when there are any changes on them.\n   *\n   */\n  setupReactionForLocalStorage() {\n    if (this.local_storage_properties.length) {\n      (0,mobx__WEBPACK_IMPORTED_MODULE_1__.reaction)(() => this.local_storage_properties.map(i => this[i]), () => this.saveToStorage(this.local_storage_properties, BaseStore.STORAGES.LOCAL_STORAGE));\n    }\n  }\n\n  /**\n   * Sets up a reaction on properties which are mentioned in `session_storage_properties`\n   *  and invokes `saveToStorage` when there are any changes on them.\n   *\n   */\n  setupReactionForSessionStorage() {\n    if (this.session_storage_properties.length) {\n      (0,mobx__WEBPACK_IMPORTED_MODULE_1__.reaction)(() => this.session_storage_properties.map(i => this[i]), () => this.saveToStorage(this.session_storage_properties, BaseStore.STORAGES.SESSION_STORAGE));\n    }\n  }\n\n  /**\n   * Removes properties that are not passed from the snapshot of the store and saves it to the passed storage\n   *\n   * @param {String[]} properties - A list of the store's properties' names which should be saved in the storage.\n   * @param {Symbol}   storage    - A symbol object that defines the storage which the snapshot should be stored in it.\n   *\n   */\n  saveToStorage(properties, storage) {\n    const snapshot = JSON.stringify(this.getSnapshot(properties), (key, value) => {\n      if (value !== null) return value;\n      return undefined;\n    });\n    if (storage === BaseStore.STORAGES.LOCAL_STORAGE) {\n      localStorage.setItem(this.store_name, snapshot);\n    } else if (storage === BaseStore.STORAGES.SESSION_STORAGE) {\n      sessionStorage.setItem(this.store_name, snapshot);\n    }\n  }\n\n  /**\n   * Retrieves saved snapshot of the store and assigns to the current instance.\n   *\n   */\n  retrieveFromStorage() {\n    const local_storage_snapshot = JSON.parse(localStorage.getItem(this.store_name, {}));\n    const session_storage_snapshot = JSON.parse(sessionStorage.getItem(this.store_name, {}));\n    const snapshot = _objectSpread(_objectSpread({}, local_storage_snapshot), session_storage_snapshot);\n    Object.keys(snapshot).forEach(k => this[k] = snapshot[k]);\n  }\n\n  /**\n   * Sets validation error messages for an observable property of the store\n   *\n   * @param {String} propertyName - The observable property's name\n   * @param [{String}] messages - An array of strings that contains validation error messages for the particular property.\n   *\n   */\n  setValidationErrorMessages(propertyName, messages) {\n    const is_different = () => !!this.validation_errors[propertyName].filter(x => !messages.includes(x)).concat(messages.filter(x => !this.validation_errors[propertyName].includes(x))).length;\n    if (!this.validation_errors[propertyName] || is_different()) {\n      this.validation_errors[propertyName] = messages;\n    }\n  }\n\n  /**\n   * Sets validation rules\n   *\n   * @param {object} rules\n   *\n   */\n  setValidationRules() {\n    let rules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    Object.keys(rules).forEach(key => {\n      this.addRule(key, rules[key]);\n    });\n  }\n\n  /**\n   * Adds rules to the particular property\n   *\n   * @param {String} property\n   * @param {String} rules\n   *\n   */\n  addRule(property, rules) {\n    this.validation_rules[property] = rules;\n    (0,mobx__WEBPACK_IMPORTED_MODULE_1__.intercept)(this, property, change => {\n      this.validateProperty(property, change.newValue);\n      return change;\n    });\n  }\n\n  /**\n   * Validates a particular property of the store\n   *\n   * @param {String} property - The name of the property in the store\n   * @param {object} value    - The value of the property, it can be undefined.\n   *\n   */\n  validateProperty(property, value) {\n    const trigger = this.validation_rules[property].trigger;\n    const inputs = {\n      [property]: value !== undefined ? value : this[property]\n    };\n    const validation_rules = {\n      [property]: this.validation_rules[property].rules || []\n    };\n    if (!!trigger && Object.hasOwnProperty.call(this, trigger)) {\n      inputs[trigger] = this[trigger];\n      validation_rules[trigger] = this.validation_rules[trigger].rules || [];\n    }\n    const validator = new _deriv_shared__WEBPACK_IMPORTED_MODULE_0__.Validator(inputs, validation_rules, this);\n    validator.isPassed();\n    Object.keys(inputs).forEach(key => {\n      this.setValidationErrorMessages(key, validator.errors.get(key));\n    });\n  }\n\n  /**\n   * Validates all properties which validation rule has been set for.\n   *\n   */\n  validateAllProperties() {\n    const validation_rules = Object.keys(this.validation_rules);\n    const validation_errors = Object.keys(this.validation_errors);\n    validation_rules.forEach(p => {\n      this.validateProperty(p, this[p]);\n    });\n\n    // Remove keys that are present in error, but not in rules:\n    validation_errors.forEach(error => {\n      if (!validation_rules.includes(error)) {\n        delete this.validation_errors[error];\n      }\n    });\n  }\n  onSwitchAccount(listener) {\n    if (listener) {\n      this.switch_account_listener = listener;\n      this.switchAccountDisposer = (0,mobx__WEBPACK_IMPORTED_MODULE_1__.when)(() => this.root_store.client.switch_broadcast, () => {\n        try {\n          const result = this.switch_account_listener();\n          if (result && result.then && typeof result.then === 'function') {\n            result.then(() => {\n              this.root_store.client.switchEndSignal();\n              this.onSwitchAccount(this.switch_account_listener);\n            });\n          } else {\n            throw new Error('Switching account listeners are required to return a promise.');\n          }\n        } catch (error) {\n          // there is no listener currently active. so we can just ignore the error raised from treating\n          // a null object as a function. Although, in development mode, we throw a console error.\n          if (!(0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.isProduction)()) {\n            console.error(error); // eslint-disable-line\n          }\n        }\n      });\n    }\n  }\n  onPreSwitchAccount(listener) {\n    if (listener) {\n      this.pre_switch_account_listener = listener;\n      this.preSwitchAccountDisposer = (0,mobx__WEBPACK_IMPORTED_MODULE_1__.when)(() => this.root_store.client.pre_switch_broadcast, () => {\n        try {\n          var _this$pre_switch_acco;\n          const result = (_this$pre_switch_acco = this.pre_switch_account_listener) === null || _this$pre_switch_acco === void 0 ? void 0 : _this$pre_switch_acco.call(this);\n          if (result && result.then && typeof result.then === 'function') {\n            result.then(() => {\n              this.root_store.client.setPreSwitchAccount(false);\n              this.onPreSwitchAccount(this.pre_switch_account_listener);\n            });\n          } else {\n            throw new Error('Pre-switch account listeners are required to return a promise.');\n          }\n        } catch (error) {\n          // there is no listener currently active. so we can just ignore the error raised from treating\n          // a null object as a function. Although, in development mode, we throw a console error.\n          if (!(0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.isProduction)()) {\n            console.error(error); // eslint-disable-line\n          }\n        }\n      });\n    }\n  }\n  onLogout(listener) {\n    this.logoutDisposer = (0,mobx__WEBPACK_IMPORTED_MODULE_1__.when)(() => this.root_store.client.has_logged_out, async () => {\n      try {\n        const result = this.logout_listener();\n        if (result && result.then && typeof result.then === 'function') {\n          result.then(() => {\n            this.root_store.client.setLogout(false);\n            this.onLogout(this.logout_listener);\n          });\n        } else {\n          throw new Error('Logout listeners are required to return a promise.');\n        }\n      } catch (error) {\n        // there is no listener currently active. so we can just ignore the error raised from treating\n        // a null object as a function. Although, in development mode, we throw a console error.\n        if (!(0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.isProduction)()) {\n          console.error(error); // eslint-disable-line\n        }\n      }\n    });\n    this.logout_listener = listener;\n  }\n  onClientInit(listener) {\n    this.clientInitDisposer = (0,mobx__WEBPACK_IMPORTED_MODULE_1__.when)(() => this.root_store.client.initialized_broadcast, async () => {\n      try {\n        const result = this.client_init_listener();\n        if (result && result.then && typeof result.then === 'function') {\n          result.then(() => {\n            this.root_store.client.setInitialized(false);\n            this.onClientInit(this.client_init_listener);\n          });\n        } else {\n          throw new Error('Client init listeners are required to return a promise.');\n        }\n      } catch (error) {\n        // there is no listener currently active. so we can just ignore the error raised from treating\n        // a null object as a function. Although, in development mode, we throw a console error.\n        if (!(0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.isProduction)()) {\n          console.error(error); // eslint-disable-line\n        }\n      }\n    });\n    this.client_init_listener = listener;\n  }\n  onNetworkStatusChange(listener) {\n    this.networkStatusChangeDisposer = (0,mobx__WEBPACK_IMPORTED_MODULE_1__.reaction)(() => this.root_store.common.is_network_online, is_online => {\n      try {\n        this.network_status_change_listener(is_online);\n      } catch (error) {\n        // there is no listener currently active. so we can just ignore the error raised from treating\n        // a null object as a function. Although, in development mode, we throw a console error.\n        if (!(0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.isProduction)()) {\n          console.error(error); // eslint-disable-line\n        }\n      }\n    });\n    this.network_status_change_listener = listener;\n  }\n  onThemeChange(listener) {\n    this.themeChangeDisposer = (0,mobx__WEBPACK_IMPORTED_MODULE_1__.reaction)(() => this.root_store.ui.is_dark_mode_on, is_dark_mode_on => {\n      try {\n        this.theme_change_listener(is_dark_mode_on);\n      } catch (error) {\n        // there is no listener currently active. so we can just ignore the error raised from treating\n        // a null object as a function. Although, in development mode, we throw a console error.\n        if (!(0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.isProduction)()) {\n          console.error(error); // eslint-disable-line\n        }\n      }\n    });\n    this.theme_change_listener = listener;\n  }\n  onRealAccountSignupEnd(listener) {\n    this.realAccountSignupEndedDisposer = (0,mobx__WEBPACK_IMPORTED_MODULE_1__.when)(() => this.root_store.ui.has_real_account_signup_ended, () => {\n      try {\n        const result = this.real_account_signup_ended_listener();\n        if (result && result.then && typeof result.then === 'function') {\n          result.then(() => {\n            this.root_store.ui.setRealAccountSignupEnd(false);\n            this.onRealAccountSignupEnd(this.real_account_signup_ended_listener);\n          });\n        } else {\n          throw new Error('Real account signup listeners are required to return a promise.');\n        }\n      } catch (error) {\n        // there is no listener currently active. so we can just ignore the error raised from treating\n        // a null object as a function. Although, in development mode, we throw a console error.\n        if (!(0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.isProduction)()) {\n          console.error(error); // eslint-disable-line\n        }\n      }\n    });\n    this.real_account_signup_ended_listener = listener;\n  }\n  disposePreSwitchAccount() {\n    if (typeof this.preSwitchAccountDisposer === 'function') {\n      this.preSwitchAccountDisposer();\n    }\n    this.pre_switch_account_listener = null;\n  }\n  disposeSwitchAccount() {\n    if (typeof this.switchAccountDisposer === 'function') {\n      this.switchAccountDisposer();\n    }\n    this.switch_account_listener = null;\n  }\n  disposeLogout() {\n    if (typeof this.logoutDisposer === 'function') {\n      this.logoutDisposer();\n    }\n    this.logout_listener = null;\n  }\n  disposeClientInit() {\n    if (typeof this.clientInitDisposer === 'function') {\n      this.clientInitDisposer();\n    }\n    this.client_init_listener = null;\n  }\n  disposeNetworkStatusChange() {\n    if (typeof this.networkStatusChangeDisposer === 'function') {\n      this.networkStatusChangeDisposer();\n    }\n    this.network_status_change_listener = null;\n  }\n  disposeThemeChange() {\n    if (typeof this.themeChangeDisposer === 'function') {\n      this.themeChangeDisposer();\n    }\n    this.theme_change_listener = null;\n  }\n  disposeRealAccountSignupEnd() {\n    if (typeof this.realAccountSignupEndedDisposer === 'function') {\n      this.realAccountSignupEndedDisposer();\n    }\n    this.real_account_signup_ended_listener = null;\n  }\n  onUnmount() {\n    this.disposePreSwitchAccount();\n    this.disposeSwitchAccount();\n    this.disposeLogout();\n    this.disposeClientInit();\n    this.disposeNetworkStatusChange();\n    this.disposeThemeChange();\n    this.disposeRealAccountSignupEnd();\n  }\n  assertHasValidCache(loginid) {\n    // account was changed when this was unmounted.\n    if (this.root_store.client.loginid !== loginid) {\n      for (var _len = arguments.length, reactions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        reactions[_key - 1] = arguments[_key];\n      }\n      reactions.forEach(act => act());\n      this.partial_fetch_time = false;\n    }\n  }\n}\n/**\n * An enum object to define LOCAL_STORAGE and SESSION_STORAGE\n */\nBaseStore.STORAGES = Object.freeze({\n  LOCAL_STORAGE: Symbol('LOCAL_STORAGE'),\n  SESSION_STORAGE: Symbol('SESSION_STORAGE')\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../reports/src/Stores/base-store.js\n");

/***/ }),

/***/ "../../reports/src/Stores/useReportsStores.tsx":
/*!*****************************************************!*\
  !*** ../../reports/src/Stores/useReportsStores.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReportsStoreProvider: () => (/* binding */ ReportsStoreProvider),\n/* harmony export */   useReportsStore: () => (/* binding */ useReportsStore)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\");\n/* harmony import */ var _deriv_stores__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @deriv/stores */ \"../../stores/src/useStore.ts\");\n/* harmony import */ var _Modules_Profit_profit_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Modules/Profit/profit-store */ \"../../reports/src/Stores/Modules/Profit/profit-store.js\");\n/* harmony import */ var _Modules_Statement_statement_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Modules/Statement/statement-store */ \"../../reports/src/Stores/Modules/Statement/statement-store.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-runtime */ \"../../../node_modules/react/jsx-runtime.js\");\n\n\n\n\n\nconst ReportsStoreContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\nconst ReportsStoreProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  const root_store = (0,_deriv_stores__WEBPACK_IMPORTED_MODULE_4__[\"default\"])();\n  const memoizedValue = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return {\n      profit_table: new _Modules_Profit_profit_store__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n        root_store\n      }),\n      statement: new _Modules_Statement_statement_store__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n        root_store\n      })\n    };\n  }, [root_store]);\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(ReportsStoreContext.Provider, {\n    value: memoizedValue,\n    children: children\n  });\n};\nconst useReportsStore = () => {\n  const store = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ReportsStoreContext);\n  if (!store) {\n    throw new Error('useReportsStore must be used within ReportsStoreProvider');\n  }\n  return store;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vcmVwb3J0cy9zcmMvU3RvcmVzL3VzZVJlcG9ydHNTdG9yZXMudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBbURBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uLy4uL3JlcG9ydHMvc3JjL1N0b3Jlcy91c2VSZXBvcnRzU3RvcmVzLnRzeD9hY2I0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJ0BkZXJpdi9zdG9yZXMnO1xuaW1wb3J0IFByb2ZpdFN0b3JlcyBmcm9tICcuL01vZHVsZXMvUHJvZml0L3Byb2ZpdC1zdG9yZSc7XG5pbXBvcnQgU3RhdGVtZW50U3RvcmVzIGZyb20gJy4vTW9kdWxlcy9TdGF0ZW1lbnQvc3RhdGVtZW50LXN0b3JlJztcbmltcG9ydCB7IGZvcm1hdFByb2ZpdFRhYmxlVHJhbnNhY3Rpb25zIH0gZnJvbSAnLi9Nb2R1bGVzL1Byb2ZpdC9IZWxwZXJzL2Zvcm1hdC1yZXNwb25zZSc7XG5cbnR5cGUgVE92ZXJyaWRlUHJvZml0U3RvcmUgPSBPbWl0PFByb2ZpdFN0b3JlcywgJ2RhdGEnIHwgJ2RhdGVfZnJvbScgfCAndG90YWxzJyB8ICdoYW5kbGVEYXRlQ2hhbmdlJz4gJiB7XG4gICAgZGF0ZV9mcm9tOiBudW1iZXI7XG4gICAgZGF0YTogUmV0dXJuVHlwZTx0eXBlb2YgZm9ybWF0UHJvZml0VGFibGVUcmFuc2FjdGlvbnM+W107XG4gICAgaGFuZGxlRGF0ZUNoYW5nZTogKFxuICAgICAgICB2YWx1ZXM6IHsgdG8/OiBtb21lbnQuTW9tZW50OyBmcm9tPzogbW9tZW50Lk1vbWVudDsgaXNfYmF0Y2g/OiBib29sZWFuIH0sXG4gICAgICAgIG90aGVyUGFyYW1zPzoge1xuICAgICAgICAgICAgZGF0ZV9yYW5nZT86IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IG51bWJlcj47XG4gICAgICAgICAgICBzaG91bGRGaWx0ZXJDb250cmFjdFR5cGVzPzogYm9vbGVhbjtcbiAgICAgICAgfVxuICAgICkgPT4gdm9pZDtcbiAgICB0b3RhbHM6IHsgW2tleTogc3RyaW5nXTogdW5rbm93biB9O1xufTtcblxudHlwZSBUT3ZlcnJpZGVTdGF0ZW1lbnRTdG9yZSA9IE9taXQ8XG4gICAgU3RhdGVtZW50U3RvcmVzLFxuICAgIHwgJ2FjY291bnRfc3RhdGlzdGljcydcbiAgICB8ICdhY3Rpb25fdHlwZSdcbiAgICB8ICdkYXRhJ1xuICAgIHwgJ2RhdGVfZnJvbSdcbiAgICB8ICdkYXRlX3RvJ1xuICAgIHwgJ2ZpbHRlcmVkX2RhdGVfcmFuZ2UnXG4gICAgfCAnaGFuZGxlRGF0ZUNoYW5nZSdcbiAgICB8ICdoYW5kbGVGaWx0ZXJDaGFuZ2UnXG4gICAgfCAnaGFuZGxlU2Nyb2xsJ1xuICAgIHwgJ3N1ZmZpeF9pY29uJ1xuPiAmIHtcbiAgICBhY2NvdW50X3N0YXRpc3RpY3M6IHsgdG90YWxfZGVwb3NpdHM6IG51bWJlcjsgdG90YWxfd2l0aGRyYXdhbHM6IG51bWJlciB9O1xuICAgIGFjdGlvbl90eXBlOiBzdHJpbmc7XG4gICAgZGF0YTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfVtdO1xuICAgIGRhdGVfZnJvbTogbnVtYmVyO1xuICAgIGRhdGVfdG86IG51bWJlcjtcbiAgICBmaWx0ZXJlZF9kYXRlX3JhbmdlOiB7XG4gICAgICAgIGR1cmF0aW9uOiBudW1iZXI7XG4gICAgICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgICAgIG9uQ2xpY2s/OiAoKSA9PiB2b2lkO1xuICAgICAgICB2YWx1ZT86IHN0cmluZztcbiAgICB9O1xuICAgIGhhbmRsZURhdGVDaGFuZ2U6ICgpID0+IHZvaWQ7XG4gICAgaGFuZGxlRmlsdGVyQ2hhbmdlOiAoKSA9PiB2b2lkO1xuICAgIGhhbmRsZVNjcm9sbDogUmVhY3QuVUlFdmVudEhhbmRsZXI8SFRNTERpdkVsZW1lbnQ+O1xuICAgIHN1ZmZpeF9pY29uOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBUUmVwb3J0c1N0b3JlID0ge1xuICAgIHByb2ZpdF90YWJsZTogVE92ZXJyaWRlUHJvZml0U3RvcmU7XG4gICAgc3RhdGVtZW50OiBUT3ZlcnJpZGVTdGF0ZW1lbnRTdG9yZTtcbn07XG5cbmNvbnN0IFJlcG9ydHNTdG9yZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PFRSZXBvcnRzU3RvcmUgfCBudWxsPihudWxsKTtcblxuZXhwb3J0IGNvbnN0IFJlcG9ydHNTdG9yZVByb3ZpZGVyID0gKHsgY2hpbGRyZW4gfTogUmVhY3QuUHJvcHNXaXRoQ2hpbGRyZW48dW5rbm93bj4pID0+IHtcbiAgICBjb25zdCByb290X3N0b3JlID0gdXNlU3RvcmUoKTtcbiAgICBjb25zdCBtZW1vaXplZFZhbHVlID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwcm9maXRfdGFibGU6IG5ldyBQcm9maXRTdG9yZXMoeyByb290X3N0b3JlIH0pLFxuICAgICAgICAgICAgc3RhdGVtZW50OiBuZXcgU3RhdGVtZW50U3RvcmVzKHsgcm9vdF9zdG9yZSB9KSxcbiAgICAgICAgfSBhcyB1bmtub3duIGFzIFRSZXBvcnRzU3RvcmU7XG4gICAgfSwgW3Jvb3Rfc3RvcmVdKTtcblxuICAgIHJldHVybiA8UmVwb3J0c1N0b3JlQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17bWVtb2l6ZWRWYWx1ZX0+e2NoaWxkcmVufTwvUmVwb3J0c1N0b3JlQ29udGV4dC5Qcm92aWRlcj47XG59O1xuXG5leHBvcnQgY29uc3QgdXNlUmVwb3J0c1N0b3JlID0gKCkgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gUmVhY3QudXNlQ29udGV4dChSZXBvcnRzU3RvcmVDb250ZXh0KTtcblxuICAgIGlmICghc3RvcmUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1c2VSZXBvcnRzU3RvcmUgbXVzdCBiZSB1c2VkIHdpdGhpbiBSZXBvcnRzU3RvcmVQcm92aWRlcicpO1xuICAgIH1cblxuICAgIHJldHVybiBzdG9yZTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../reports/src/Stores/useReportsStores.tsx\n");

/***/ }),

/***/ "../../trader/dist/trader/js/trader.js":
/*!*********************************************!*\
  !*** ../../trader/dist/trader/js/trader.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv-com/analytics */ \"../../../node_modules/@deriv-com/analytics/lib/index.js\"), __webpack_require__(/*! @deriv/components */ \"../../components/src/index.ts\"), __webpack_require__(/*! @deriv/deriv-charts */ \"../../../node_modules/@deriv/deriv-charts/dist/smartcharts.js\"), __webpack_require__(/*! @deriv/reports/src/Stores/useReportsStores */ \"../../reports/src/Stores/useReportsStores.tsx\"), __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"), __webpack_require__(/*! mobx */ \"../../../node_modules/mobx/dist/mobx.esm.js\"), __webpack_require__(/*! mobx-react-lite */ \"../../../node_modules/mobx-react-lite/es/index.js\"), __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\"), __webpack_require__(/*! react-dom */ \"../../../node_modules/react-dom/index.js\"), __webpack_require__(/*! react-router */ \"../../../node_modules/react-router/esm/react-router.js\"), __webpack_require__(/*! react-router-dom */ \"../../../node_modules/react-router-dom/esm/react-router-dom.js\"));\n\telse {}\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_com_analytics__, __WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_deriv_charts__, __WEBPACK_EXTERNAL_MODULE__deriv_reports_src_Stores_useReportsStores__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_mobx__, __WEBPACK_EXTERNAL_MODULE_mobx_react_lite__, __WEBPACK_EXTERNAL_MODULE_react__, __WEBPACK_EXTERNAL_MODULE_react_dom__, __WEBPACK_EXTERNAL_MODULE_react_router__, __WEBPACK_EXTERNAL_MODULE_react_router_dom__) => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"../api/src/hooks/useRemoteConfig.ts\":\n/*!*******************************************!*\\\n  !*** ../api/src/hooks/useRemoteConfig.ts ***!\n  \\*******************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \\\"react\\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _deriv_com_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @deriv-com/utils */ \\\"../../node_modules/@deriv-com/utils/dist/deriv-utils.js\\\");\\n/* harmony import */ var _remote_config_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../remote_config.json */ \\\"../api/src/remote_config.json\\\");\\nfunction _typeof(o) { \\\"@babel/helpers - typeof\\\"; return _typeof = \\\"function\\\" == typeof Symbol && \\\"symbol\\\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \\\"function\\\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \\\"symbol\\\" : typeof o; }, _typeof(o); }\\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\\nfunction _nonIterableRest() { throw new TypeError(\\\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\"); }\\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\\\"string\\\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \\\"Object\\\" === t && r.constructor && (t = r.constructor.name), \\\"Map\\\" === t || \\\"Set\\\" === t ? Array.from(r) : \\\"Arguments\\\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \\\"undefined\\\" != typeof Symbol && r[Symbol.iterator] || r[\\\"@@iterator\\\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\\\"return\\\"] && (u = t[\\\"return\\\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\\nfunction _regeneratorRuntime() { \\\"use strict\\\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \\\"function\\\" == typeof Symbol ? Symbol : {}, a = i.iterator || \\\"@@iterator\\\", c = i.asyncIterator || \\\"@@asyncIterator\\\", u = i.toStringTag || \\\"@@toStringTag\\\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \\\"\\\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \\\"_invoke\\\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \\\"normal\\\", arg: t.call(e, r) }; } catch (t) { return { type: \\\"throw\\\", arg: t }; } } e.wrap = wrap; var h = \\\"suspendedStart\\\", l = \\\"suspendedYield\\\", f = \\\"executing\\\", s = \\\"completed\\\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\\\"next\\\", \\\"throw\\\", \\\"return\\\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\\\"throw\\\" !== c.type) { var u = c.arg, h = u.value; return h && \\\"object\\\" == _typeof(h) && n.call(h, \\\"__await\\\") ? e.resolve(h.__await).then(function (t) { invoke(\\\"next\\\", t, i, a); }, function (t) { invoke(\\\"throw\\\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\\\"throw\\\", t, i, a); }); } a(c.arg); } var r; o(this, \\\"_invoke\\\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\\\"Generator is already running\\\"); if (o === s) { if (\\\"throw\\\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\\\"next\\\" === n.method) n.sent = n._sent = n.arg;else if (\\\"throw\\\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \\\"return\\\" === n.method && n.abrupt(\\\"return\\\", n.arg); o = f; var p = tryCatch(e, r, n); if (\\\"normal\\\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \\\"throw\\\" === p.type && (o = s, n.method = \\\"throw\\\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \\\"throw\\\" === n && e.iterator[\\\"return\\\"] && (r.method = \\\"return\\\", r.arg = t, maybeInvokeDelegate(e, r), \\\"throw\\\" === r.method) || \\\"return\\\" !== n && (r.method = \\\"throw\\\", r.arg = new TypeError(\\\"The iterator does not provide a '\\\" + n + \\\"' method\\\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\\\"throw\\\" === i.type) return r.method = \\\"throw\\\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \\\"return\\\" !== r.method && (r.method = \\\"next\\\", r.arg = t), r.delegate = null, y) : a : (r.method = \\\"throw\\\", r.arg = new TypeError(\\\"iterator result is not an object\\\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \\\"normal\\\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \\\"root\\\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \\\"\\\" === e) { var r = e[a]; if (r) return r.call(e); if (\\\"function\\\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \\\" is not iterable\\\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \\\"constructor\\\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \\\"constructor\\\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \\\"GeneratorFunction\\\"), e.isGeneratorFunction = function (t) { var e = \\\"function\\\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \\\"GeneratorFunction\\\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \\\"GeneratorFunction\\\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \\\"Generator\\\"), define(g, a, function () { return this; }), define(g, \\\"toString\\\", function () { return \\\"[object Generator]\\\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \\\"next\\\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \\\"t\\\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\\\"throw\\\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \\\"throw\\\", a.arg = e, r.next = n, o && (r.method = \\\"next\\\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\\\"root\\\" === i.tryLoc) return handle(\\\"end\\\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \\\"catchLoc\\\"), u = n.call(i, \\\"finallyLoc\\\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\\\"try statement without catch or finally\\\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \\\"finallyLoc\\\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\\\"break\\\" === t || \\\"continue\\\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \\\"next\\\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\\\"throw\\\" === t.type) throw t.arg; return \\\"break\\\" === t.type || \\\"continue\\\" === t.type ? this.next = t.arg : \\\"return\\\" === t.type ? (this.rval = this.arg = t.arg, this.method = \\\"return\\\", this.next = \\\"end\\\") : \\\"normal\\\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \\\"catch\\\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\\\"throw\\\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\\\"illegal catch attempt\\\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \\\"next\\\" === this.method && (this.arg = t), y; } }, e; }\\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \\\"next\\\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \\\"throw\\\", n); } _next(void 0); }); }; }\\n\\n\\n\\nvar remoteConfigQuery = /*#__PURE__*/function () {\\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\\n    var isProductionOrStaging, REMOTE_CONFIG_URL, response;\\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\\n      while (1) switch (_context.prev = _context.next) {\\n        case 0:\\n          isProductionOrStaging =  false || \\\"development\\\" === 'staging';\\n          REMOTE_CONFIG_URL = process.env.REMOTE_CONFIG_URL || '';\\n          if (!(isProductionOrStaging && REMOTE_CONFIG_URL === '')) {\\n            _context.next = 4;\\n            break;\\n          }\\n          throw new Error('Remote Config URL is not set!');\\n        case 4:\\n          _context.next = 6;\\n          return fetch(REMOTE_CONFIG_URL);\\n        case 6:\\n          response = _context.sent;\\n          if (response.ok) {\\n            _context.next = 9;\\n            break;\\n          }\\n          throw new Error('Remote Config Server is out of reach!');\\n        case 9:\\n          return _context.abrupt(\\\"return\\\", response.json());\\n        case 10:\\n        case \\\"end\\\":\\n          return _context.stop();\\n      }\\n    }, _callee);\\n  }));\\n  return function remoteConfigQuery() {\\n    return _ref.apply(this, arguments);\\n  };\\n}();\\nfunction useRemoteConfig() {\\n  var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(_remote_config_json__WEBPACK_IMPORTED_MODULE_2__),\\n    _useState2 = _slicedToArray(_useState, 2),\\n    data = _useState2[0],\\n    setData = _useState2[1];\\n  var isMounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\\n    isMounted.current = true;\\n    return function () {\\n      isMounted.current = false;\\n    };\\n  }, []);\\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\\n    if (enabled) {\\n      remoteConfigQuery().then(/*#__PURE__*/function () {\\n        var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(res) {\\n          var resHash, dataHash;\\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\\n            while (1) switch (_context2.prev = _context2.next) {\\n              case 0:\\n                _context2.next = 2;\\n                return _deriv_com_utils__WEBPACK_IMPORTED_MODULE_1__.ObjectUtils.hashObject(res);\\n              case 2:\\n                resHash = _context2.sent;\\n                _context2.next = 5;\\n                return _deriv_com_utils__WEBPACK_IMPORTED_MODULE_1__.ObjectUtils.hashObject(data);\\n              case 5:\\n                dataHash = _context2.sent;\\n                if (resHash !== dataHash && isMounted.current) {\\n                  setData(res);\\n                }\\n              case 7:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }, _callee2);\\n        }));\\n        return function (_x) {\\n          return _ref2.apply(this, arguments);\\n        };\\n      }())[\\\"catch\\\"](function (error) {\\n        // eslint-disable-next-line no-console\\n        console.log('Remote Config error: ', error);\\n      });\\n    }\\n  }, [enabled, data]);\\n  return {\\n    data: data\\n  };\\n}\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useRemoteConfig);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vYXBpL3NyYy9ob29rcy91c2VSZW1vdGVDb25maWcudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7QUFBQTtBQUFBO0FBREE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQVhBO0FBQUE7QUFBQTtBQWFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L3RyYWRlci8uLi9hcGkvc3JjL2hvb2tzL3VzZVJlbW90ZUNvbmZpZy50cz9mOTJmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE9iamVjdFV0aWxzIH0gZnJvbSAnQGRlcml2LWNvbS91dGlscyc7XG5pbXBvcnQgaW5pdERhdGEgZnJvbSAnLi4vcmVtb3RlX2NvbmZpZy5qc29uJztcblxuY29uc3QgcmVtb3RlQ29uZmlnUXVlcnkgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgaXNQcm9kdWN0aW9uT3JTdGFnaW5nID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyB8fCBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3N0YWdpbmcnO1xuICAgIGNvbnN0IFJFTU9URV9DT05GSUdfVVJMID0gcHJvY2Vzcy5lbnYuUkVNT1RFX0NPTkZJR19VUkwgfHwgJyc7XG4gICAgaWYgKGlzUHJvZHVjdGlvbk9yU3RhZ2luZyAmJiBSRU1PVEVfQ09ORklHX1VSTCA9PT0gJycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZW1vdGUgQ29uZmlnIFVSTCBpcyBub3Qgc2V0IScpO1xuICAgIH1cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFJFTU9URV9DT05GSUdfVVJMKTtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmVtb3RlIENvbmZpZyBTZXJ2ZXIgaXMgb3V0IG9mIHJlYWNoIScpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xufTtcblxuZnVuY3Rpb24gdXNlUmVtb3RlQ29uZmlnKGVuYWJsZWQgPSBmYWxzZSkge1xuICAgIGNvbnN0IFtkYXRhLCBzZXREYXRhXSA9IHVzZVN0YXRlKGluaXREYXRhKTtcbiAgICBjb25zdCBpc01vdW50ZWQgPSB1c2VSZWYoZmFsc2UpO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBpc01vdW50ZWQuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgIH0sIFtdKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChlbmFibGVkKSB7XG4gICAgICAgICAgICByZW1vdGVDb25maWdRdWVyeSgpXG4gICAgICAgICAgICAgICAgLnRoZW4oYXN5bmMgcmVzID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzSGFzaCA9IGF3YWl0IE9iamVjdFV0aWxzLmhhc2hPYmplY3QocmVzKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YUhhc2ggPSBhd2FpdCBPYmplY3RVdGlscy5oYXNoT2JqZWN0KGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzSGFzaCAhPT0gZGF0YUhhc2ggJiYgaXNNb3VudGVkLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldERhdGEocmVzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1JlbW90ZSBDb25maWcgZXJyb3I6ICcsIGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIFtlbmFibGVkLCBkYXRhXSk7XG5cbiAgICByZXR1cm4geyBkYXRhIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVzZVJlbW90ZUNvbmZpZztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../api/src/hooks/useRemoteConfig.ts\\n\");\n\n/***/ }),\n\n/***/ \"../hooks/src/useDtraderV2Flag.ts\":\n/*!****************************************!*\\\n  !*** ../hooks/src/useDtraderV2Flag.ts ***!\n  \\****************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \\\"react\\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @deriv/shared */ \\\"@deriv/shared\\\");\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_deriv_shared__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var _deriv_com_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @deriv-com/ui */ \\\"../../node_modules/@deriv-com/ui/dist/hooks/useDevice.js\\\");\\n/* harmony import */ var _useIsGrowthbookLoaded__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useIsGrowthbookLoaded */ \\\"../hooks/src/useIsGrowthbookLoaded.ts\\\");\\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\\nfunction _nonIterableRest() { throw new TypeError(\\\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\"); }\\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\\\"string\\\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \\\"Object\\\" === t && r.constructor && (t = r.constructor.name), \\\"Map\\\" === t || \\\"Set\\\" === t ? Array.from(r) : \\\"Arguments\\\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \\\"undefined\\\" != typeof Symbol && r[Symbol.iterator] || r[\\\"@@iterator\\\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\\\"return\\\"] && (u = t[\\\"return\\\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\\n\\n\\n\\n\\nvar useDtraderV2Flag = function useDtraderV2Flag() {\\n  var _useIsGrowthbookIsLoa = (0,_useIsGrowthbookLoaded__WEBPACK_IMPORTED_MODULE_2__[\\\"default\\\"])(),\\n    is_growthbook_loaded = _useIsGrowthbookIsLoa.isGBLoaded,\\n    is_gb_available = _useIsGrowthbookIsLoa.isGBAvailable;\\n  var load_dtrader_module = is_growthbook_loaded || !is_gb_available;\\n  var _useDevice = (0,_deriv_com_ui__WEBPACK_IMPORTED_MODULE_3__.useDevice)(),\\n    is_mobile = _useDevice.isMobile,\\n    is_desktop = _useDevice.isDesktop;\\n  var is_dtrader_v2_mobile = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.isDtraderV2MobileEnabled)(is_mobile);\\n  var is_dtrader_v2_desktop = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.isDtraderV2DesktopEnabled)(is_desktop);\\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false),\\n    _useState2 = _slicedToArray(_useState, 2),\\n    dtrader_v2_enabled_mobile = _useState2[0],\\n    setDtraderV2EnabledMobile = _useState2[1];\\n  var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false),\\n    _useState4 = _slicedToArray(_useState3, 2),\\n    dtrader_v2_enabled_desktop = _useState4[0],\\n    setDtraderV2EnabledDesktop = _useState4[1];\\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\\n    if (is_growthbook_loaded || is_dtrader_v2_mobile) {\\n      setDtraderV2EnabledMobile(is_dtrader_v2_mobile);\\n    }\\n    if (is_growthbook_loaded || is_dtrader_v2_desktop) {\\n      setDtraderV2EnabledDesktop(is_dtrader_v2_desktop);\\n    }\\n    // eslint-disable-next-line react-hooks/exhaustive-deps\\n  }, [is_mobile, is_growthbook_loaded, is_desktop]);\\n  return {\\n    dtrader_v2_enabled_mobile: dtrader_v2_enabled_mobile,\\n    dtrader_v2_enabled_desktop: dtrader_v2_enabled_desktop,\\n    load_dtrader_module: load_dtrader_module\\n  };\\n};\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useDtraderV2Flag);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vaG9va3Mvc3JjL3VzZUR0cmFkZXJWMkZsYWcudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvdHJhZGVyLy4uL2hvb2tzL3NyYy91c2VEdHJhZGVyVjJGbGFnLnRzPzAxMjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgaXNEdHJhZGVyVjJEZXNrdG9wRW5hYmxlZCwgaXNEdHJhZGVyVjJNb2JpbGVFbmFibGVkIH0gZnJvbSAnQGRlcml2L3NoYXJlZCc7XG5pbXBvcnQgeyB1c2VEZXZpY2UgfSBmcm9tICdAZGVyaXYtY29tL3VpJztcblxuaW1wb3J0IHVzZUlzR3Jvd3RoYm9va0lzTG9hZGVkIGZyb20gJy4vdXNlSXNHcm93dGhib29rTG9hZGVkJztcblxuY29uc3QgdXNlRHRyYWRlclYyRmxhZyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGlzR0JMb2FkZWQ6IGlzX2dyb3d0aGJvb2tfbG9hZGVkLCBpc0dCQXZhaWxhYmxlOiBpc19nYl9hdmFpbGFibGUgfSA9IHVzZUlzR3Jvd3RoYm9va0lzTG9hZGVkKCk7XG4gICAgY29uc3QgbG9hZF9kdHJhZGVyX21vZHVsZSA9IGlzX2dyb3d0aGJvb2tfbG9hZGVkIHx8ICFpc19nYl9hdmFpbGFibGU7XG5cbiAgICBjb25zdCB7IGlzTW9iaWxlOiBpc19tb2JpbGUsIGlzRGVza3RvcDogaXNfZGVza3RvcCB9ID0gdXNlRGV2aWNlKCk7XG4gICAgY29uc3QgaXNfZHRyYWRlcl92Ml9tb2JpbGUgPSBpc0R0cmFkZXJWMk1vYmlsZUVuYWJsZWQoaXNfbW9iaWxlKTtcbiAgICBjb25zdCBpc19kdHJhZGVyX3YyX2Rlc2t0b3AgPSBpc0R0cmFkZXJWMkRlc2t0b3BFbmFibGVkKGlzX2Rlc2t0b3ApO1xuXG4gICAgY29uc3QgW2R0cmFkZXJfdjJfZW5hYmxlZF9tb2JpbGUsIHNldER0cmFkZXJWMkVuYWJsZWRNb2JpbGVdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IFtkdHJhZGVyX3YyX2VuYWJsZWRfZGVza3RvcCwgc2V0RHRyYWRlclYyRW5hYmxlZERlc2t0b3BdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKGlzX2dyb3d0aGJvb2tfbG9hZGVkIHx8IGlzX2R0cmFkZXJfdjJfbW9iaWxlKSB7XG4gICAgICAgICAgICBzZXREdHJhZGVyVjJFbmFibGVkTW9iaWxlKGlzX2R0cmFkZXJfdjJfbW9iaWxlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNfZ3Jvd3RoYm9va19sb2FkZWQgfHwgaXNfZHRyYWRlcl92Ml9kZXNrdG9wKSB7XG4gICAgICAgICAgICBzZXREdHJhZGVyVjJFbmFibGVkRGVza3RvcChpc19kdHJhZGVyX3YyX2Rlc2t0b3ApO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICB9LCBbaXNfbW9iaWxlLCBpc19ncm93dGhib29rX2xvYWRlZCwgaXNfZGVza3RvcF0pO1xuXG4gICAgcmV0dXJuIHsgZHRyYWRlcl92Ml9lbmFibGVkX21vYmlsZSwgZHRyYWRlcl92Ml9lbmFibGVkX2Rlc2t0b3AsIGxvYWRfZHRyYWRlcl9tb2R1bGUgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZUR0cmFkZXJWMkZsYWc7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///../hooks/src/useDtraderV2Flag.ts\\n\");\n\n/***/ }),\n\n/***/ \"../hooks/src/useIsGrowthbookLoaded.ts\":\n/*!*********************************************!*\\\n  !*** ../hooks/src/useIsGrowthbookLoaded.ts ***!\n  \\*********************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \\\"react\\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _deriv_com_analytics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @deriv-com/analytics */ \\\"@deriv-com/analytics\\\");\\n/* harmony import */ var _deriv_com_analytics__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_deriv_com_analytics__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var _deriv_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @deriv/api */ \\\"../api/src/hooks/useRemoteConfig.ts\\\");\\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\\nfunction _nonIterableRest() { throw new TypeError(\\\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\"); }\\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\\\"string\\\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \\\"Object\\\" === t && r.constructor && (t = r.constructor.name), \\\"Map\\\" === t || \\\"Set\\\" === t ? Array.from(r) : \\\"Arguments\\\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \\\"undefined\\\" != typeof Symbol && r[Symbol.iterator] || r[\\\"@@iterator\\\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\\\"return\\\"] && (u = t[\\\"return\\\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\\n\\n\\n\\nvar useIsGrowthbookIsLoaded = function useIsGrowthbookIsLoaded() {\\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false),\\n    _useState2 = _slicedToArray(_useState, 2),\\n    isGBLoaded = _useState2[0],\\n    setIsGBLoaded = _useState2[1];\\n  var _useRemoteConfig = (0,_deriv_api__WEBPACK_IMPORTED_MODULE_2__[\\\"default\\\"])(true),\\n    data = _useRemoteConfig.data;\\n  var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true),\\n    _useState4 = _slicedToArray(_useState3, 2),\\n    isGBAvailable = _useState4[0],\\n    setisGBAvailable = _useState4[1];\\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\\n    var analytics_interval;\\n    if (data !== null && data !== void 0 && data.marketing_growthbook) {\\n      var checksCounter = 0;\\n      analytics_interval = setInterval(function () {\\n        var _Analytics$getInstanc;\\n        // Check if the analytics instance is available for 10 seconds before setting the feature flag value\\n        if (checksCounter > 20) {\\n          // If the analytics instance is not available after 10 seconds, clear the interval\\n          clearInterval(analytics_interval);\\n          setisGBAvailable(false);\\n          return;\\n        }\\n        checksCounter += 1;\\n        if (_deriv_com_analytics__WEBPACK_IMPORTED_MODULE_1__.Analytics !== null && _deriv_com_analytics__WEBPACK_IMPORTED_MODULE_1__.Analytics !== void 0 && (_Analytics$getInstanc = _deriv_com_analytics__WEBPACK_IMPORTED_MODULE_1__.Analytics.getInstances()) !== null && _Analytics$getInstanc !== void 0 && _Analytics$getInstanc.ab) {\\n          setIsGBLoaded(true);\\n          clearInterval(analytics_interval);\\n        }\\n      }, 500);\\n    } else {\\n      setisGBAvailable(false);\\n    }\\n    return function () {\\n      clearInterval(analytics_interval);\\n    };\\n  }, [data.marketing_growthbook]);\\n  return {\\n    isGBLoaded: isGBLoaded,\\n    isGBAvailable: isGBAvailable\\n  };\\n};\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useIsGrowthbookIsLoaded);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vaG9va3Mvc3JjL3VzZUlzR3Jvd3RoYm9va0xvYWRlZC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi90cmFkZXIvLi4vaG9va3Mvc3JjL3VzZUlzR3Jvd3RoYm9va0xvYWRlZC50cz80YjFkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBbmFseXRpY3MgfSBmcm9tICdAZGVyaXYtY29tL2FuYWx5dGljcyc7XG5pbXBvcnQgeyB1c2VSZW1vdGVDb25maWcgfSBmcm9tICdAZGVyaXYvYXBpJztcblxuY29uc3QgdXNlSXNHcm93dGhib29rSXNMb2FkZWQgPSAoKSA9PiB7XG4gICAgY29uc3QgW2lzR0JMb2FkZWQsIHNldElzR0JMb2FkZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IHsgZGF0YSB9ID0gdXNlUmVtb3RlQ29uZmlnKHRydWUpO1xuICAgIGNvbnN0IFtpc0dCQXZhaWxhYmxlLCBzZXRpc0dCQXZhaWxhYmxlXSA9IHVzZVN0YXRlPGJvb2xlYW4+KHRydWUpO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgbGV0IGFuYWx5dGljc19pbnRlcnZhbDogTm9kZUpTLlRpbWVvdXQ7XG5cbiAgICAgICAgaWYgKGRhdGE/Lm1hcmtldGluZ19ncm93dGhib29rKSB7XG4gICAgICAgICAgICBsZXQgY2hlY2tzQ291bnRlciA9IDA7XG4gICAgICAgICAgICBhbmFseXRpY3NfaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGFuYWx5dGljcyBpbnN0YW5jZSBpcyBhdmFpbGFibGUgZm9yIDEwIHNlY29uZHMgYmVmb3JlIHNldHRpbmcgdGhlIGZlYXR1cmUgZmxhZyB2YWx1ZVxuICAgICAgICAgICAgICAgIGlmIChjaGVja3NDb3VudGVyID4gMjApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGFuYWx5dGljcyBpbnN0YW5jZSBpcyBub3QgYXZhaWxhYmxlIGFmdGVyIDEwIHNlY29uZHMsIGNsZWFyIHRoZSBpbnRlcnZhbFxuICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGFuYWx5dGljc19pbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgIHNldGlzR0JBdmFpbGFibGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNoZWNrc0NvdW50ZXIgKz0gMTtcbiAgICAgICAgICAgICAgICBpZiAoQW5hbHl0aWNzPy5nZXRJbnN0YW5jZXMoKT8uYWIpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0SXNHQkxvYWRlZCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChhbmFseXRpY3NfaW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRpc0dCQXZhaWxhYmxlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChhbmFseXRpY3NfaW50ZXJ2YWwpO1xuICAgICAgICB9O1xuICAgIH0sIFtkYXRhLm1hcmtldGluZ19ncm93dGhib29rXSk7XG5cbiAgICByZXR1cm4geyBpc0dCTG9hZGVkLCBpc0dCQXZhaWxhYmxlIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VJc0dyb3d0aGJvb2tJc0xvYWRlZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../hooks/src/useIsGrowthbookLoaded.ts\\n\");\n\n/***/ }),\n\n/***/ \"./src/index.tsx\":\n/*!***********************!*\\\n  !*** ./src/index.tsx ***!\n  \\***********************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \\\"react\\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @deriv/shared */ \\\"@deriv/shared\\\");\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_deriv_shared__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var _deriv_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @deriv/components */ \\\"@deriv/components\\\");\\n/* harmony import */ var _deriv_components__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_deriv_components__WEBPACK_IMPORTED_MODULE_2__);\\n/* harmony import */ var _deriv_hooks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @deriv/hooks */ \\\"../hooks/src/useDtraderV2Flag.ts\\\");\\n\\n\\n\\n\\nvar AppLoader = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.makeLazyLoader)(function () {\\n  return (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.moduleLoader)(function () {\\n    return Promise.all(/*! import() | trader-app */[__webpack_require__.e(\\\"vendors-node_modules_bowser_es5_js-node_modules_dayjs_dayjs_min_js-node_modules_lodash_deboun-8ca634\\\"), __webpack_require__.e(\\\"vendors-node_modules_react-content-loader_dist_react-content-loader_es_js-node_modules_react--c10131\\\"), __webpack_require__.e(\\\"src_sass_app_scss-src_App_Components_Elements_PositionsDrawer_helpers_index_ts-src_App_init-s-ba58f8\\\"), __webpack_require__.e(\\\"trader-app\\\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./App/index */ \\\"./src/App/index.tsx\\\"));\\n  });\\n}, function () {\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_2__.Loading, null);\\n})();\\nvar AppV2Loader = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.makeLazyLoader)(function () {\\n  return (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.moduleLoader)(function () {\\n    return Promise.all(/*! import() | trader-app-v2 */[__webpack_require__.e(\\\"vendors-node_modules_bowser_es5_js-node_modules_dayjs_dayjs_min_js-node_modules_lodash_deboun-8ca634\\\"), __webpack_require__.e(\\\"vendors-node_modules_cloudflare_stream-react_dist_stream-react_esm_js-node_modules_deriv_quil-145140\\\"), __webpack_require__.e(\\\"hooks_src_useMFAccountStatus_ts-src_Modules_Trading_Helpers_video-config_ts-src_Stores_Module-77c64e\\\"), __webpack_require__.e(\\\"src_sass_app_scss-src_App_Components_Elements_PositionsDrawer_helpers_index_ts-src_App_init-s-ba58f8\\\"), __webpack_require__.e(\\\"src_Modules_Contract_Containers_replay-chart_tsx-src_Stores_Modules_Trading_Helpers_logic_ts\\\"), __webpack_require__.e(\\\"trader-app-v2\\\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./AppV2/index */ \\\"./src/AppV2/index.tsx\\\"));\\n  });\\n}, function () {\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_2__.Loading.DTraderV2, {\\n    initial_app_loading: true,\\n    is_contract_details: window.location.pathname.startsWith('/contract/'),\\n    is_positions: window.location.pathname === _deriv_shared__WEBPACK_IMPORTED_MODULE_1__.routes.trader_positions,\\n    is_closed_tab: (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.getPositionsV2TabIndexFromURL)() === 1\\n  });\\n})();\\nvar App = function App(_ref) {\\n  var passthrough = _ref.passthrough;\\n  var _useDtraderV2Flag = (0,_deriv_hooks__WEBPACK_IMPORTED_MODULE_3__[\\\"default\\\"])(),\\n    dtrader_v2_enabled_desktop = _useDtraderV2Flag.dtrader_v2_enabled_desktop,\\n    dtrader_v2_enabled_mobile = _useDtraderV2Flag.dtrader_v2_enabled_mobile,\\n    load_dtrader_module = _useDtraderV2Flag.load_dtrader_module;\\n  if (load_dtrader_module) {\\n    return dtrader_v2_enabled_desktop || dtrader_v2_enabled_mobile ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(AppV2Loader, {\\n      passthrough: passthrough\\n    }) : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(AppLoader, {\\n      passthrough: passthrough\\n    });\\n  }\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_2__.Loading, null);\\n};\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (App);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXgudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBR0E7QUFTQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUdBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUlBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L3RyYWRlci8uL3NyYy9pbmRleC50c3g/ZDk4NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZ2V0UG9zaXRpb25zVjJUYWJJbmRleEZyb21VUkwsIG1ha2VMYXp5TG9hZGVyLCBtb2R1bGVMb2FkZXIsIHJvdXRlcyB9IGZyb20gJ0BkZXJpdi9zaGFyZWQnO1xuaW1wb3J0IHsgTG9hZGluZyB9IGZyb20gJ0BkZXJpdi9jb21wb25lbnRzJztcbmltcG9ydCB7IFRDb3JlU3RvcmVzIH0gZnJvbSAnQGRlcml2L3N0b3Jlcy90eXBlcyc7XG5pbXBvcnQgeyBUV2ViU29ja2V0IH0gZnJvbSAnVHlwZXMnO1xuaW1wb3J0IHsgdXNlRHRyYWRlclYyRmxhZyB9IGZyb20gJ0BkZXJpdi9ob29rcyc7XG5cbnR5cGUgQXBwdHlwZXMgPSB7XG4gICAgcGFzc3Rocm91Z2g6IHtcbiAgICAgICAgcm9vdF9zdG9yZTogVENvcmVTdG9yZXM7XG4gICAgICAgIFdTOiBUV2ViU29ja2V0O1xuICAgIH07XG59O1xuXG5jb25zdCBBcHBMb2FkZXIgPSBtYWtlTGF6eUxvYWRlcihcbiAgICAoKSA9PiBtb2R1bGVMb2FkZXIoKCkgPT4gaW1wb3J0KC8qIHdlYnBhY2tDaHVua05hbWU6IFwidHJhZGVyLWFwcFwiLCB3ZWJwYWNrUHJlbG9hZDogdHJ1ZSAqLyAnLi9BcHAvaW5kZXgnKSksXG4gICAgKCkgPT4gPExvYWRpbmcgLz5cbikoKSBhcyBSZWFjdC5Db21wb25lbnRUeXBlPEFwcHR5cGVzPjtcblxuY29uc3QgQXBwVjJMb2FkZXIgPSBtYWtlTGF6eUxvYWRlcihcbiAgICAoKSA9PiBtb2R1bGVMb2FkZXIoKCkgPT4gaW1wb3J0KC8qIHdlYnBhY2tDaHVua05hbWU6IFwidHJhZGVyLWFwcC12MlwiLCB3ZWJwYWNrUHJlbG9hZDogdHJ1ZSAqLyAnLi9BcHBWMi9pbmRleCcpKSxcbiAgICAoKSA9PiAoXG4gICAgICAgIDxMb2FkaW5nLkRUcmFkZXJWMlxuICAgICAgICAgICAgaW5pdGlhbF9hcHBfbG9hZGluZ1xuICAgICAgICAgICAgaXNfY29udHJhY3RfZGV0YWlscz17d2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLnN0YXJ0c1dpdGgoJy9jb250cmFjdC8nKX1cbiAgICAgICAgICAgIGlzX3Bvc2l0aW9ucz17d2luZG93LmxvY2F0aW9uLnBhdGhuYW1lID09PSByb3V0ZXMudHJhZGVyX3Bvc2l0aW9uc31cbiAgICAgICAgICAgIGlzX2Nsb3NlZF90YWI9e2dldFBvc2l0aW9uc1YyVGFiSW5kZXhGcm9tVVJMKCkgPT09IDF9XG4gICAgICAgIC8+XG4gICAgKVxuKSgpIGFzIFJlYWN0LkNvbXBvbmVudFR5cGU8QXBwdHlwZXM+O1xuXG5jb25zdCBBcHAgPSAoeyBwYXNzdGhyb3VnaCB9OiBBcHB0eXBlcykgPT4ge1xuICAgIGNvbnN0IHsgZHRyYWRlcl92Ml9lbmFibGVkX2Rlc2t0b3AsIGR0cmFkZXJfdjJfZW5hYmxlZF9tb2JpbGUsIGxvYWRfZHRyYWRlcl9tb2R1bGUgfSA9IHVzZUR0cmFkZXJWMkZsYWcoKTtcbiAgICBpZiAobG9hZF9kdHJhZGVyX21vZHVsZSkge1xuICAgICAgICByZXR1cm4gZHRyYWRlcl92Ml9lbmFibGVkX2Rlc2t0b3AgfHwgZHRyYWRlcl92Ml9lbmFibGVkX21vYmlsZSA/IChcbiAgICAgICAgICAgIDxBcHBWMkxvYWRlciBwYXNzdGhyb3VnaD17cGFzc3Rocm91Z2h9IC8+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgICA8QXBwTG9hZGVyIHBhc3N0aHJvdWdoPXtwYXNzdGhyb3VnaH0gLz5cbiAgICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIDxMb2FkaW5nIC8+O1xufTtcbmV4cG9ydCBkZWZhdWx0IEFwcDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/index.tsx\\n\");\n\n/***/ }),\n\n/***/ \"@deriv-com/analytics\":\n/*!***************************************!*\\\n  !*** external \"@deriv-com/analytics\" ***!\n  \\***************************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_com_analytics__;\n\n/***/ }),\n\n/***/ \"@deriv/components\":\n/*!************************************!*\\\n  !*** external \"@deriv/components\" ***!\n  \\************************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;\n\n/***/ }),\n\n/***/ \"@deriv/deriv-charts\":\n/*!**************************************!*\\\n  !*** external \"@deriv/deriv-charts\" ***!\n  \\**************************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_deriv_charts__;\n\n/***/ }),\n\n/***/ \"@deriv/reports/src/Stores/useReportsStores\":\n/*!*************************************************************!*\\\n  !*** external \"@deriv/reports/src/Stores/useReportsStores\" ***!\n  \\*************************************************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_reports_src_Stores_useReportsStores__;\n\n/***/ }),\n\n/***/ \"@deriv/shared\":\n/*!********************************!*\\\n  !*** external \"@deriv/shared\" ***!\n  \\********************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/*!**************************************!*\\\n  !*** external \"@deriv/translations\" ***!\n  \\**************************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ }),\n\n/***/ \"mobx\":\n/*!***********************!*\\\n  !*** external \"mobx\" ***!\n  \\***********************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_mobx__;\n\n/***/ }),\n\n/***/ \"mobx-react-lite\":\n/*!**********************************!*\\\n  !*** external \"mobx-react-lite\" ***!\n  \\**********************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_mobx_react_lite__;\n\n/***/ }),\n\n/***/ \"react\":\n/*!************************!*\\\n  !*** external \"react\" ***!\n  \\************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ }),\n\n/***/ \"react-dom\":\n/*!****************************!*\\\n  !*** external \"react-dom\" ***!\n  \\****************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react_dom__;\n\n/***/ }),\n\n/***/ \"react-router\":\n/*!*******************************!*\\\n  !*** external \"react-router\" ***!\n  \\*******************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react_router__;\n\n/***/ }),\n\n/***/ \"react-router-dom\":\n/*!***********************************!*\\\n  !*** external \"react-router-dom\" ***!\n  \\***********************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react_router_dom__;\n\n/***/ }),\n\n/***/ \"../../node_modules/@deriv-com/ui/dist/_commonjsHelpers-BkfeUUK-.js\":\n/*!**************************************************************************!*\\\n  !*** ../../node_modules/@deriv-com/ui/dist/_commonjsHelpers-BkfeUUK-.js ***!\n  \\**************************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   a: () => (/* binding */ l),\\n/* harmony export */   c: () => (/* binding */ u),\\n/* harmony export */   g: () => (/* binding */ f)\\n/* harmony export */ });\\nvar u = typeof globalThis < \\\"u\\\" ? globalThis : typeof window < \\\"u\\\" ? window : typeof global < \\\"u\\\" ? global : typeof self < \\\"u\\\" ? self : {};\\nfunction f(e) {\\n  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, \\\"default\\\") ? e.default : e;\\n}\\nfunction l(e) {\\n  if (e.__esModule) return e;\\n  var r = e.default;\\n  if (typeof r == \\\"function\\\") {\\n    var t = function o() {\\n      return this instanceof o ? Reflect.construct(r, arguments, this.constructor) : r.apply(this, arguments);\\n    };\\n    t.prototype = r.prototype;\\n  } else t = {};\\n  return Object.defineProperty(t, \\\"__esModule\\\", { value: !0 }), Object.keys(e).forEach(function(o) {\\n    var n = Object.getOwnPropertyDescriptor(e, o);\\n    Object.defineProperty(t, o, n.get ? n : {\\n      enumerable: !0,\\n      get: function() {\\n        return e[o];\\n      }\\n    });\\n  }), t;\\n}\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BkZXJpdi1jb20vdWkvZGlzdC9fY29tbW9uanNIZWxwZXJzLUJrZmVVVUstLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi90cmFkZXIvLi4vLi4vbm9kZV9tb2R1bGVzL0BkZXJpdi1jb20vdWkvZGlzdC9fY29tbW9uanNIZWxwZXJzLUJrZmVVVUstLmpzP2M4ZjAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHUgPSB0eXBlb2YgZ2xvYmFsVGhpcyA8IFwidVwiID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgPCBcInVcIiA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgPCBcInVcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmIDwgXCJ1XCIgPyBzZWxmIDoge307XG5mdW5jdGlvbiBmKGUpIHtcbiAgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBcImRlZmF1bHRcIikgPyBlLmRlZmF1bHQgOiBlO1xufVxuZnVuY3Rpb24gbChlKSB7XG4gIGlmIChlLl9fZXNNb2R1bGUpIHJldHVybiBlO1xuICB2YXIgciA9IGUuZGVmYXVsdDtcbiAgaWYgKHR5cGVvZiByID09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciB0ID0gZnVuY3Rpb24gbygpIHtcbiAgICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgbyA/IFJlZmxlY3QuY29uc3RydWN0KHIsIGFyZ3VtZW50cywgdGhpcy5jb25zdHJ1Y3RvcikgOiByLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgICB0LnByb3RvdHlwZSA9IHIucHJvdG90eXBlO1xuICB9IGVsc2UgdCA9IHt9O1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgT2JqZWN0LmtleXMoZSkuZm9yRWFjaChmdW5jdGlvbihvKSB7XG4gICAgdmFyIG4gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIG8pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBvLCBuLmdldCA/IG4gOiB7XG4gICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBlW29dO1xuICAgICAgfVxuICAgIH0pO1xuICB9KSwgdDtcbn1cbmV4cG9ydCB7XG4gIGwgYXMgYSxcbiAgdSBhcyBjLFxuICBmIGFzIGdcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///../../node_modules/@deriv-com/ui/dist/_commonjsHelpers-BkfeUUK-.js\\n\");\n\n/***/ }),\n\n/***/ \"../../node_modules/@deriv-com/ui/dist/hooks/useDevice.js\":\n/*!****************************************************************!*\\\n  !*** ../../node_modules/@deriv-com/ui/dist/hooks/useDevice.js ***!\n  \\****************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   useDevice: () => (/* binding */ d)\\n/* harmony export */ });\\n/* harmony import */ var _index_EY1gwl5O_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index-EY1gwl5O.js */ \\\"../../node_modules/@deriv-com/ui/dist/index-EY1gwl5O.js\\\");\\n\\nconst d = () => {\\n  const i = (0,_index_EY1gwl5O_js__WEBPACK_IMPORTED_MODULE_0__.u)(\\\"(min-width: 1280px)\\\"), a = (0,_index_EY1gwl5O_js__WEBPACK_IMPORTED_MODULE_0__.u)(\\\"(max-width: 600px)\\\"), n = (0,_index_EY1gwl5O_js__WEBPACK_IMPORTED_MODULE_0__.u)(\\n    \\\"(min-width: 601px) and (max-width: 1279px)\\\"\\n  ), e = (0,_index_EY1gwl5O_js__WEBPACK_IMPORTED_MODULE_0__.u)(\\n    \\\"(min-width: 601px) and (max-width: 1279px) and (orientation: portrait)\\\"\\n  ), o = (0,_index_EY1gwl5O_js__WEBPACK_IMPORTED_MODULE_0__.u)(\\n    \\\"(max-width: 1279px) and (orientation: landscape)\\\"\\n  );\\n  return {\\n    /** returns Larger screen tablets [min-width: 1280px] */\\n    isDesktop: i,\\n    /**  returns Smaller screen tablets [max-width: 600px] */\\n    isMobile: a,\\n    /** returns Larger screen phones and smaller screen desktop [min-width: 601px and max-width: 1279px] */\\n    isTablet: n,\\n    /** returns tablet screen with portrait orientation [min-width: 601px and max-width: 1279px and orientation: portrait] */\\n    isTabletPortrait: e,\\n    /** returns mobile or medium screens in landscape orientation [max-width: 1279px and orientation: landscape] */\\n    isMobileOrTabletLandscape: o\\n  };\\n};\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BkZXJpdi1jb20vdWkvZGlzdC9ob29rcy91c2VEZXZpY2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L3RyYWRlci8uLi8uLi9ub2RlX21vZHVsZXMvQGRlcml2LWNvbS91aS9kaXN0L2hvb2tzL3VzZURldmljZS5qcz9hNjFjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHUgYXMgdCB9IGZyb20gXCIuLi9pbmRleC1FWTFnd2w1Ty5qc1wiO1xuY29uc3QgZCA9ICgpID0+IHtcbiAgY29uc3QgaSA9IHQoXCIobWluLXdpZHRoOiAxMjgwcHgpXCIpLCBhID0gdChcIihtYXgtd2lkdGg6IDYwMHB4KVwiKSwgbiA9IHQoXG4gICAgXCIobWluLXdpZHRoOiA2MDFweCkgYW5kIChtYXgtd2lkdGg6IDEyNzlweClcIlxuICApLCBlID0gdChcbiAgICBcIihtaW4td2lkdGg6IDYwMXB4KSBhbmQgKG1heC13aWR0aDogMTI3OXB4KSBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdClcIlxuICApLCBvID0gdChcbiAgICBcIihtYXgtd2lkdGg6IDEyNzlweCkgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKVwiXG4gICk7XG4gIHJldHVybiB7XG4gICAgLyoqIHJldHVybnMgTGFyZ2VyIHNjcmVlbiB0YWJsZXRzIFttaW4td2lkdGg6IDEyODBweF0gKi9cbiAgICBpc0Rlc2t0b3A6IGksXG4gICAgLyoqICByZXR1cm5zIFNtYWxsZXIgc2NyZWVuIHRhYmxldHMgW21heC13aWR0aDogNjAwcHhdICovXG4gICAgaXNNb2JpbGU6IGEsXG4gICAgLyoqIHJldHVybnMgTGFyZ2VyIHNjcmVlbiBwaG9uZXMgYW5kIHNtYWxsZXIgc2NyZWVuIGRlc2t0b3AgW21pbi13aWR0aDogNjAxcHggYW5kIG1heC13aWR0aDogMTI3OXB4XSAqL1xuICAgIGlzVGFibGV0OiBuLFxuICAgIC8qKiByZXR1cm5zIHRhYmxldCBzY3JlZW4gd2l0aCBwb3J0cmFpdCBvcmllbnRhdGlvbiBbbWluLXdpZHRoOiA2MDFweCBhbmQgbWF4LXdpZHRoOiAxMjc5cHggYW5kIG9yaWVudGF0aW9uOiBwb3J0cmFpdF0gKi9cbiAgICBpc1RhYmxldFBvcnRyYWl0OiBlLFxuICAgIC8qKiByZXR1cm5zIG1vYmlsZSBvciBtZWRpdW0gc2NyZWVucyBpbiBsYW5kc2NhcGUgb3JpZW50YXRpb24gW21heC13aWR0aDogMTI3OXB4IGFuZCBvcmllbnRhdGlvbjogbGFuZHNjYXBlXSAqL1xuICAgIGlzTW9iaWxlT3JUYWJsZXRMYW5kc2NhcGU6IG9cbiAgfTtcbn07XG5leHBvcnQge1xuICBkIGFzIHVzZURldmljZVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../node_modules/@deriv-com/ui/dist/hooks/useDevice.js\\n\");\n\n/***/ }),\n\n/***/ \"../../node_modules/@deriv-com/ui/dist/index-EY1gwl5O.js\":\n/*!***************************************************************!*\\\n  !*** ../../node_modules/@deriv-com/ui/dist/index-EY1gwl5O.js ***!\n  \\***************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   a: () => (/* binding */ g),\\n/* harmony export */   u: () => (/* binding */ O)\\n/* harmony export */ });\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \\\"react\\\");\\n/* harmony import */ var _commonjsHelpers_BkfeUUK_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_commonjsHelpers-BkfeUUK-.js */ \\\"../../node_modules/@deriv-com/ui/dist/_commonjsHelpers-BkfeUUK-.js\\\");\\n\\n\\nvar v = typeof _commonjsHelpers_BkfeUUK_js__WEBPACK_IMPORTED_MODULE_1__.c == \\\"object\\\" && _commonjsHelpers_BkfeUUK_js__WEBPACK_IMPORTED_MODULE_1__.c && _commonjsHelpers_BkfeUUK_js__WEBPACK_IMPORTED_MODULE_1__.c.Object === Object && _commonjsHelpers_BkfeUUK_js__WEBPACK_IMPORTED_MODULE_1__.c, E = typeof self == \\\"object\\\" && self && self.Object === Object && self;\\nv || E || Function(\\\"return this\\\")();\\nvar f = typeof window < \\\"u\\\" ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\\nfunction L(t, s, o, i) {\\n  const c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(s);\\n  f(() => {\\n    c.current = s;\\n  }, [s]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\\n    const n = window;\\n    if (!(n && n.addEventListener))\\n      return;\\n    const r = (e) => {\\n      c.current(e);\\n    };\\n    return n.addEventListener(t, r, i), () => {\\n      n.removeEventListener(t, r, i);\\n    };\\n  }, [t, o, i]);\\n}\\nvar h = typeof window > \\\"u\\\";\\nfunction O(t, {\\n  defaultValue: s = !1,\\n  initializeWithValue: o = !0\\n} = {}) {\\n  const i = (e) => h ? s : window.matchMedia(e).matches, [c, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => o ? i(t) : s);\\n  function r() {\\n    n(i(t));\\n  }\\n  return f(() => {\\n    const e = window.matchMedia(t);\\n    return r(), e.addListener ? e.addListener(r) : e.addEventListener(\\\"change\\\", r), () => {\\n      e.removeListener ? e.removeListener(r) : e.removeEventListener(\\\"change\\\", r);\\n    };\\n  }, [t]), c;\\n}\\nfunction g(t, s, o = \\\"mousedown\\\", i = {}) {\\n  L(\\n    o,\\n    (c) => {\\n      const n = c.target;\\n      if (!n || !n.isConnected)\\n        return;\\n      (Array.isArray(t) ? t.filter((e) => !!e.current).every((e) => e.current && !e.current.contains(n)) : t.current && !t.current.contains(n)) && s(c);\\n    },\\n    void 0,\\n    i\\n  );\\n}\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BkZXJpdi1jb20vdWkvZGlzdC9pbmRleC1FWTFnd2w1Ty5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L3RyYWRlci8uLi8uLi9ub2RlX21vZHVsZXMvQGRlcml2LWNvbS91aS9kaXN0L2luZGV4LUVZMWd3bDVPLmpzPzQwZjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUgYXMgZCwgdXNlTGF5b3V0RWZmZWN0IGFzIG0sIHVzZUVmZmVjdCBhcyB1LCB1c2VSZWYgYXMgbCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgYyBhcyBhIH0gZnJvbSBcIi4vX2NvbW1vbmpzSGVscGVycy1Ca2ZlVVVLLS5qc1wiO1xudmFyIHYgPSB0eXBlb2YgYSA9PSBcIm9iamVjdFwiICYmIGEgJiYgYS5PYmplY3QgPT09IE9iamVjdCAmJiBhLCBFID0gdHlwZW9mIHNlbGYgPT0gXCJvYmplY3RcIiAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcbnYgfHwgRSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG52YXIgZiA9IHR5cGVvZiB3aW5kb3cgPCBcInVcIiA/IG0gOiB1O1xuZnVuY3Rpb24gTCh0LCBzLCBvLCBpKSB7XG4gIGNvbnN0IGMgPSBsKHMpO1xuICBmKCgpID0+IHtcbiAgICBjLmN1cnJlbnQgPSBzO1xuICB9LCBbc10pLCB1KCgpID0+IHtcbiAgICBjb25zdCBuID0gd2luZG93O1xuICAgIGlmICghKG4gJiYgbi5hZGRFdmVudExpc3RlbmVyKSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCByID0gKGUpID0+IHtcbiAgICAgIGMuY3VycmVudChlKTtcbiAgICB9O1xuICAgIHJldHVybiBuLmFkZEV2ZW50TGlzdGVuZXIodCwgciwgaSksICgpID0+IHtcbiAgICAgIG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LCByLCBpKTtcbiAgICB9O1xuICB9LCBbdCwgbywgaV0pO1xufVxudmFyIGggPSB0eXBlb2Ygd2luZG93ID4gXCJ1XCI7XG5mdW5jdGlvbiBPKHQsIHtcbiAgZGVmYXVsdFZhbHVlOiBzID0gITEsXG4gIGluaXRpYWxpemVXaXRoVmFsdWU6IG8gPSAhMFxufSA9IHt9KSB7XG4gIGNvbnN0IGkgPSAoZSkgPT4gaCA/IHMgOiB3aW5kb3cubWF0Y2hNZWRpYShlKS5tYXRjaGVzLCBbYywgbl0gPSBkKCgpID0+IG8gPyBpKHQpIDogcyk7XG4gIGZ1bmN0aW9uIHIoKSB7XG4gICAgbihpKHQpKTtcbiAgfVxuICByZXR1cm4gZigoKSA9PiB7XG4gICAgY29uc3QgZSA9IHdpbmRvdy5tYXRjaE1lZGlhKHQpO1xuICAgIHJldHVybiByKCksIGUuYWRkTGlzdGVuZXIgPyBlLmFkZExpc3RlbmVyKHIpIDogZS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIHIpLCAoKSA9PiB7XG4gICAgICBlLnJlbW92ZUxpc3RlbmVyID8gZS5yZW1vdmVMaXN0ZW5lcihyKSA6IGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCByKTtcbiAgICB9O1xuICB9LCBbdF0pLCBjO1xufVxuZnVuY3Rpb24gZyh0LCBzLCBvID0gXCJtb3VzZWRvd25cIiwgaSA9IHt9KSB7XG4gIEwoXG4gICAgbyxcbiAgICAoYykgPT4ge1xuICAgICAgY29uc3QgbiA9IGMudGFyZ2V0O1xuICAgICAgaWYgKCFuIHx8ICFuLmlzQ29ubmVjdGVkKVxuICAgICAgICByZXR1cm47XG4gICAgICAoQXJyYXkuaXNBcnJheSh0KSA/IHQuZmlsdGVyKChlKSA9PiAhIWUuY3VycmVudCkuZXZlcnkoKGUpID0+IGUuY3VycmVudCAmJiAhZS5jdXJyZW50LmNvbnRhaW5zKG4pKSA6IHQuY3VycmVudCAmJiAhdC5jdXJyZW50LmNvbnRhaW5zKG4pKSAmJiBzKGMpO1xuICAgIH0sXG4gICAgdm9pZCAwLFxuICAgIGlcbiAgKTtcbn1cbmV4cG9ydCB7XG4gIGcgYXMgYSxcbiAgTyBhcyB1XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///../../node_modules/@deriv-com/ui/dist/index-EY1gwl5O.js\\n\");\n\n/***/ }),\n\n/***/ \"../../node_modules/@deriv-com/utils/dist/deriv-utils.js\":\n/*!***************************************************************!*\\\n  !*** ../../node_modules/@deriv-com/utils/dist/deriv-utils.js ***!\n  \\***************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   AppIDConstants: () => (/* binding */ Xe),\\n/* harmony export */   BrandConstants: () => (/* binding */ nt),\\n/* harmony export */   BrandUtils: () => (/* binding */ gt),\\n/* harmony export */   CountryUtils: () => (/* binding */ mt),\\n/* harmony export */   CurrencyConstants: () => (/* binding */ Qe),\\n/* harmony export */   DocumentConstants: () => (/* binding */ qe),\\n/* harmony export */   FormatUtils: () => (/* binding */ at),\\n/* harmony export */   ImageUtils: () => (/* binding */ st),\\n/* harmony export */   LocalStorageConstants: () => (/* binding */ et),\\n/* harmony export */   LocalStorageUtils: () => (/* binding */ it),\\n/* harmony export */   MobileDevicesConstants: () => (/* binding */ ot),\\n/* harmony export */   OSDetectionUtils: () => (/* binding */ pt),\\n/* harmony export */   ObjectUtils: () => (/* binding */ ct),\\n/* harmony export */   PromiseUtils: () => (/* binding */ dt),\\n/* harmony export */   URLConstants: () => (/* binding */ tt),\\n/* harmony export */   URLUtils: () => (/* binding */ ut),\\n/* harmony export */   ValidationConstants: () => (/* binding */ rt),\\n/* harmony export */   WebSocketUtils: () => (/* binding */ lt)\\n/* harmony export */ });\\nconst P = {\\n  real: \\\"green.derivws.com\\\",\\n  demo: \\\"blue.derivws.com\\\"\\n}, C = {\\n  \\\"deriv.app\\\": \\\"16929\\\",\\n  \\\"app.deriv.com\\\": \\\"16929\\\",\\n  \\\"staging-app.deriv.com\\\": \\\"16303\\\",\\n  \\\"app.deriv.me\\\": \\\"1411\\\",\\n  \\\"staging-app.deriv.me\\\": \\\"1411\\\",\\n  \\\"app.deriv.be\\\": \\\"30767\\\",\\n  \\\"staging-app.deriv.be\\\": \\\"31186\\\",\\n  \\\"binary.com\\\": \\\"1\\\",\\n  \\\"test-app.deriv.com\\\": \\\"51072\\\",\\n  \\\"p2p.deriv.com\\\": \\\"61859\\\",\\n  \\\"staging-p2p.deriv.com\\\": \\\"62019\\\",\\n  \\\"api.deriv.com\\\": \\\"36544\\\",\\n  \\\"staging-api.deriv.com\\\": \\\"36545\\\",\\n  \\\"smarttrader.deriv.com\\\": \\\"22168\\\",\\n  \\\"staging-smarttrader.deriv.com\\\": \\\"22169\\\",\\n  \\\"staging-dbot.deriv.com\\\": \\\"29934\\\",\\n  \\\"staging-dbot.deriv.me\\\": \\\"29934\\\",\\n  \\\"staging-dbot.deriv.be\\\": \\\"29934\\\",\\n  \\\"dbot.deriv.com\\\": \\\"65555\\\",\\n  \\\"dbot.deriv.be\\\": \\\"65556\\\",\\n  \\\"dbot.deriv.me\\\": \\\"65557\\\"\\n}, _ = \\\"deriv\\\", Xe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  appBrand: _,\\n  domainAppId: C,\\n  environments: P\\n}, Symbol.toStringTag, { value: \\\"Module\\\" })), O = {\\n  AAD: 2,\\n  AED: 2,\\n  AFN: 2,\\n  ALL: 2,\\n  AMD: 2,\\n  ANG: 2,\\n  AOA: 2,\\n  ARS: 2,\\n  AUD: 2,\\n  AWG: 2,\\n  AZN: 2,\\n  BAM: 2,\\n  BBD: 2,\\n  BCH: 8,\\n  BDT: 2,\\n  BGN: 2,\\n  BHD: 3,\\n  BIF: 0,\\n  BMD: 2,\\n  BND: 2,\\n  BOB: 2,\\n  BOV: 2,\\n  BRL: 2,\\n  BSD: 2,\\n  BTC: 8,\\n  BTN: 2,\\n  BUSD: 2,\\n  BWP: 2,\\n  BYN: 2,\\n  BZD: 2,\\n  CAD: 2,\\n  CDF: 2,\\n  CHE: 2,\\n  CHF: 2,\\n  CHW: 2,\\n  CLF: 4,\\n  CLP: 0,\\n  CNY: 2,\\n  COP: 2,\\n  COU: 2,\\n  CRC: 2,\\n  CUC: 2,\\n  CUP: 2,\\n  CVE: 2,\\n  CZK: 2,\\n  DAI: 2,\\n  DJF: 0,\\n  DKK: 2,\\n  DOP: 2,\\n  DZD: 2,\\n  EGP: 2,\\n  ERN: 2,\\n  ETB: 2,\\n  ETC: 8,\\n  ETH: 8,\\n  EUR: 2,\\n  EURS: 2,\\n  eUSDT: 2,\\n  FJD: 2,\\n  FKP: 2,\\n  GBP: 2,\\n  GEL: 2,\\n  GHS: 2,\\n  GIP: 2,\\n  GMD: 2,\\n  GNF: 0,\\n  GTQ: 2,\\n  GYD: 2,\\n  HKD: 2,\\n  HNL: 2,\\n  HRK: 2,\\n  HTG: 2,\\n  HUF: 2,\\n  IDK: 0,\\n  IDR: 2,\\n  ILS: 2,\\n  INR: 2,\\n  IQD: 3,\\n  IRR: 2,\\n  ISK: 0,\\n  JMD: 2,\\n  JOD: 3,\\n  JPY: 0,\\n  KES: 2,\\n  KGS: 2,\\n  KHR: 2,\\n  KMF: 0,\\n  KPW: 2,\\n  KRW: 0,\\n  KWD: 3,\\n  KYD: 2,\\n  KZT: 2,\\n  LAK: 2,\\n  LBP: 2,\\n  LKR: 2,\\n  LRD: 2,\\n  LSL: 2,\\n  LTC: 8,\\n  LYD: 3,\\n  MAD: 2,\\n  MDL: 2,\\n  MGA: 2,\\n  MKD: 2,\\n  MMK: 2,\\n  MNT: 2,\\n  MOP: 2,\\n  MRU: 2,\\n  MUR: 2,\\n  MVR: 2,\\n  MWK: 2,\\n  MXN: 2,\\n  MXV: 2,\\n  MYR: 2,\\n  MZN: 2,\\n  NAD: 2,\\n  NGN: 2,\\n  NIO: 2,\\n  NOK: 2,\\n  NPR: 2,\\n  NZD: 2,\\n  OMR: 3,\\n  PAB: 2,\\n  PAX: 2,\\n  PEN: 2,\\n  PGK: 2,\\n  PHP: 2,\\n  PKR: 2,\\n  PLN: 2,\\n  PYG: 0,\\n  QAR: 2,\\n  RON: 2,\\n  RSD: 2,\\n  RUB: 2,\\n  RWF: 0,\\n  SAR: 2,\\n  SBD: 2,\\n  SCR: 2,\\n  SDG: 2,\\n  SEK: 2,\\n  SGD: 2,\\n  SHP: 2,\\n  SLL: 2,\\n  SOS: 2,\\n  SRD: 2,\\n  SSP: 2,\\n  STN: 2,\\n  SVC: 2,\\n  SYP: 2,\\n  SZL: 2,\\n  THB: 2,\\n  TJS: 2,\\n  TMT: 2,\\n  TND: 3,\\n  TOP: 2,\\n  TRY: 2,\\n  TTD: 2,\\n  TUSD: 2,\\n  tUSDT: 2,\\n  TWD: 2,\\n  TZS: 2,\\n  UAH: 2,\\n  UGX: 0,\\n  USB: 2,\\n  USD: 2,\\n  USDC: 2,\\n  USDK: 2,\\n  UST: 2,\\n  USN: 2,\\n  UYI: 0,\\n  UYU: 2,\\n  UYW: 4,\\n  UZS: 2,\\n  VES: 2,\\n  VND: 0,\\n  VUV: 0,\\n  WST: 2,\\n  XAF: 0,\\n  XCD: 2,\\n  XOF: 0,\\n  XPF: 0,\\n  YER: 2,\\n  ZAR: 2,\\n  ZMW: 2,\\n  ZWL: 2\\n}, Qe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  precision: O\\n}, Symbol.toStringTag, { value: \\\"Module\\\" })), T = [\\\"PNG\\\", \\\"JPG\\\", \\\"JPEG\\\", \\\"GIF\\\", \\\"PDF\\\"], qe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  supportedDocumentFormats: T\\n}, Symbol.toStringTag, { value: \\\"Module\\\" })), R = \\\"client.active_loginid\\\", Q = \\\"client.account_list\\\", q = \\\"client.verify_email\\\", U = \\\"config.app_id\\\", M = \\\"config.server_url\\\", S = \\\"i18n_language\\\", ee = \\\"ui.theme\\\", te = \\\"ui.show_report_drawer\\\", re = \\\"ui.expand_account_switcher\\\", ne = \\\"trader.layout\\\", oe = \\\"should_not_show_auto_archive_message_again\\\", ae = \\\"order_ids\\\", se = \\\"should_show_p2p_guide\\\", ie = \\\"should_show_p2p_follow_user_guide\\\", et = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  accountList: Q,\\n  activeLoginid: R,\\n  configAppId: U,\\n  configServerURL: M,\\n  i18nLanguage: S,\\n  lastVerifyEmail: q,\\n  p2pArchiveMessage: oe,\\n  p2pOrderIds: ae,\\n  p2pShowFollowUserGuide: ie,\\n  p2pShowGuide: se,\\n  traderLayout: ne,\\n  uiExpandAccountSwitcher: re,\\n  uiShowReportsDrawer: te,\\n  uiTheme: ee\\n}, Symbol.toStringTag, { value: \\\"Module\\\" })), y = \\\"deriv.com\\\", N = \\\"deriv.me\\\", $ = \\\"deriv.be\\\", E = [y, $, N], h = typeof window < \\\"u\\\" && window.location.hostname.split(\\\"app.\\\")[1], d = E.includes(h) ? h : y, ce = `https://bot.${d}`, de = `https://staging-bot.${d}`, le = `https://app.${d}`, ue = `https://staging-app.${d}`, B = `https://${d}`, j = `https://eu.${d}`, ge = `https://staging.${d}`, pe = d, me = `https://smarttrader.${d}`, fe = `https://staging-smarttrader.${d}`, Se = `https://p2p.${d}`, Ae = `https://staging-p2p.${d}`, he = \\\"https://wa.me/35699578341\\\", De = {\\n  lang: \\\"lang\\\",\\n  action: \\\"action\\\"\\n}, F = \\\"https://www.cloudflare.com/cdn-cgi/trace\\\", tt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  baseDomain: h,\\n  binaryBotProduction: ce,\\n  binaryBotStaging: de,\\n  cloudflareTrace: F,\\n  deriv: y,\\n  derivAppProduction: le,\\n  derivAppStaging: ue,\\n  derivBe: $,\\n  derivComProduction: B,\\n  derivComProductionEU: j,\\n  derivComStaging: ge,\\n  derivHost: pe,\\n  derivMe: N,\\n  derivP2pProduction: Se,\\n  derivP2pStaging: Ae,\\n  domain: d,\\n  queryParameters: De,\\n  smartTraderProduction: me,\\n  smartTraderStaging: fe,\\n  supportedDomains: E,\\n  whatsApp: he\\n}, Symbol.toStringTag, { value: \\\"Module\\\" })), ve = {\\n  /**\\n   * Represents the special characters permitted in an address.\\n   * @remarks This is to be used in the message of the validation error, to let the user know which characters are permitted.\\n   * @example `Special characters permitted: ${ValidationConstants.messagesHints.addressPermittedSpecialCharacters}`\\n   */\\n  addressPermittedSpecialCharacters: \\\". , ' : ; ( ) ° @ # / -\\\"\\n}, _e = {\\n  /**\\n   * @regex /^[\\\\p{L}\\\\p{Nd}\\\\s'’.,:;()\\\\\\\\x{b0}@#/-]{0,70}$/u\\n   * @description\\n   * This pattern matches any string with no more than 70 characters, can contain letters, numbers, spaces, and any of the following special characters: '’.,:;()@#/-.\\n   * @example ValidationConstants.patterns.address.test(\\\"123 Main St.\\\")\\n   * @example ValidationConstants.patterns.address.test(\\\"Apt. 123\\\")\\n   * @example ValidationConstants.patterns.address.test(\\\"123 Main St. Apt. 123\\\")\\n   **/\\n  address: /^[\\\\p{L}\\\\p{Nd}\\\\s'’.,:;()\\\\\\\\x{b0}@#/-]{0,70}$/u,\\n  /**\\n   * @regex /^\\\\p{L}[\\\\p{L}\\\\s'.-]{0,49}$/u\\n   * @description This pattern matches any string with no more than 50 characters.\\n   * @example ValidationConstants.patterns.addressCity.test(\\\"Main St.\\\")\\n   * @example ValidationConstants.patterns.addressCity.test(\\\"Apt.\\\")\\n   * @example ValidationConstants.patterns.addressCity.test(\\\"Main St. Apt.\\\")\\n   **/\\n  addressCity: new RegExp(\\\"^\\\\\\\\p{L}[\\\\\\\\p{L}\\\\\\\\s'.-]{0,49}$\\\", \\\"u\\\"),\\n  /**\\n   * @regex /^[\\\\p{L}\\\\p{Nd}\\\\s'.,-;]{0,100}$/u\\n   * @description This pattern matches any string that contains up to 100 characters composed of Unicode letters, Unicode digits, whitespace characters, apostrophes, periods, commas, hyphens, and semicolons ( '.,-;).\\n   * @example ValidationConstants.patterns.addressState.test(\\\"New York\\\")\\n   * @example ValidationConstants.patterns.addressState.test(\\\"Québec\\\")\\n   **/\\n  addressState: /^[\\\\p{L}\\\\p{Nd}\\\\s'.,(),-;]{0,100}$/u,\\n  /**\\n   * @regex /^(?=.{1,20}$)[+-]?[0-9]+\\\\.?[0-9]*$/\\n   * @description This pattern matches any string with 0-9 characters (numeric values. i.e. both integers and floats), and may contain a '+' or '-' sign.\\n   * @example ValidationConstants.patterns.barrier.test(\\\"123\\\")\\n   * @example ValidationConstants.patterns.barrier.test(\\\"123.45\\\")\\n   * @example ValidationConstants.patterns.barrier.test(\\\"-123\\\")\\n   * @example ValidationConstants.patterns.barrier.test(\\\"-123.45\\\")\\n   * @example ValidationConstants.patterns.barrier.test(\\\"+123\\\")\\n   * @example ValidationConstants.patterns.barrier.test(\\\"+123.45\\\")\\n   */\\n  barrier: /^(?=.{1,20}$)[+-]?[0-9]+\\\\.?[0-9]*$/,\\n  /**\\n   * @regex /^\\\\d*(\\\\.\\\\d+)?$/\\n   * @description This pattern matches any string that contains only numeric values, and may contain a decimal point.\\n   * @example ValidationConstants.patterns.decimal.test(\\\"123\\\")\\n   * @example ValidationConstants.patterns.decimal.test(\\\"123.45\\\")\\n   */\\n  decimal: /^\\\\d*(\\\\.\\\\d+)?$/,\\n  /**\\n   * @regex /^\\\\d+$/\\n   * @description This pattern matches any string that contains only numeric values.\\n   * @example ValidationConstants.patterns.integer.test(\\\"123\\\")\\n   * @example ValidationConstants.patterns.integer.test(\\\"12345\\\")\\n   */\\n  integer: /^\\\\d+$/,\\n  /**\\n   * @regex /p[.\\\\s]+o[.\\\\s]+box/i\\n   * @description This pattern matches any string that contains the characters 'p.o.box' or 'p o box'.\\n   * @example ValidationConstants.patterns.postalOfficeBoxNumber.test(\\\"P.O. Box 1234\\\")\\n   * @example ValidationConstants.patterns.postalOfficeBoxNumber.test(\\\"p.o. box 1234\\\")\\n   * @example ValidationConstants.patterns.postalOfficeBoxNumber.test(\\\"P O Box 1234\\\")\\n   * @example ValidationConstants.patterns.postalOfficeBoxNumber.test(\\\"p o box 1234\\\")\\n   */\\n  postalOfficeBoxNumber: /p[.\\\\s]+o[.\\\\s]+box/i,\\n  /**\\n   * @regex /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,63}$/\\n   * @description This pattern matches any string with 2-63 characters, and contains aplhanumeric characters, an '@' sign, and may also contain any of these characters '+,-._'.\\n   * @example ValidationConstants.patterns.email.test(\\\"doe@meme.me\\\")\\n   * **/\\n  email: /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,63}$/,\\n  /**\\n   * @regex /^(?=.*[a-z])(?=.*\\\\d)(?=.*[A-Z])[!-~]{8,25}$/\\n   * @description This pattern matches any string that contains 8-25 characters that include; at least one lowercase letter, at least one digit, at least one uppercase letter, and only printable ASCII characters (from '!' to '~')\\n   * @example ValidationConstants.patterns.password.test(\\\"Password1!\\\")\\n   **/\\n  password: /^(?=.*[a-z])(?=.*\\\\d)(?=.*[A-Z])[!-~]{8,25}$/,\\n  /**\\n   * @regex /^(?=.*[a-z])(?=.*[0-9])(?=.*[A-Z])[ -~]{6,50}$/\\n   * @description This pattern matches any string that contains 6-50 characters that include; at least one lowercase letter, at least one digit, at least one uppercase letter, and only printable ASCII characters (from '!' to '~')\\n   * @example ValidationConstants.patterns.affilliatePassword.test(\\\"Password1\\\")\\n   **/\\n  affilliatePassword: /^(?=.*[a-z])(?=.*[0-9])(?=.*[A-Z])[ -~]{6,50}$/,\\n  /**\\n   * @regex /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{1,255}$/\\n   * @description This pattern matches any string with 1-255 characters, and contains aplhanumeric characters, an '@' sign, and may also contain any of these characters '+,-._'.\\n   * @example ValidationConstants.patterns.paymentAgentEmail.test(\\\"doe@meme.us\\\")\\n   **/\\n  paymentAgentEmail: /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{1,255}$/,\\n  /**\\n   * @regex /^([A-Za-z0-9][A-Za-z0-9\\\\s-]{0,20})?$/\\n   * @description This pattern matches any string with no more than 20 characters and may not contain '+'.\\n   * @example ValidationConstants.patterns.postalCode.test(\\\"123\\\")\\n   * @example ValidationConstants.patterns.postalCode.test(\\\"123-456\\\")\\n   **/\\n  postalCode: /^([A-Za-z0-9][A-Za-z0-9\\\\s-]{0,20})?$/,\\n  /**\\n   * @regex /^(?!^$|\\\\s+)[A-Za-z0-9.\\\\/\\\\s-]{0,25}$/\\n   * @description This pattern matches any string with 0-25 characters, and may contain alphanumeric characters (both uppercase and lowercase), and any of these characters'./-', and or sapce characters\\n   * @example ValidationConstants.patterns.taxIdentificationNumber.test(\\\"123\\\")\\n   **/\\n  taxIdentificationNumber: /^(?!^$|\\\\s+)[A-Za-z0-9.\\\\/\\\\s-]{0,25}$/,\\n  /**\\n   * @regex /^\\\\+((-|\\\\s)*[0-9]){9,20}$/\\n   * @description This pattern matches any string that starts with a '+' character, followed by 9-20 digits, allowing hyphens or spaces.\\n   * @example ValidationConstants.patterns.phoneNumber.test(\\\"+1234567890\\\")\\n   **/\\n  phoneNumber: /^\\\\+((-|\\\\s)*[0-9]){9,20}$/,\\n  /**\\n   * @regex /(image|application)\\\\/(jpe?g|pdf|png)$/\\n   * @description This pattern matches any of the file types jpeg, jpg, pdf, or png.\\n   * @example ValidationConstants.patterns.fileType.test(\\\"image/jpeg\\\")\\n   * @example ValidationConstants.patterns.fileType.test(\\\"application/pdf\\\")\\n   * @example ValidationConstants.patterns.fileType.test(\\\"image/png\\\")\\n   * @example ValidationConstants.patterns.fileType.test(\\\"image/jpg\\\")\\n   **/\\n  fileType: /(image|application)\\\\/(jpe?g|pdf|png)$/,\\n  /**\\n   * @regex /(^\\\\d{4})\\\\s(\\\\d{2}X{2})\\\\s(X{4})\\\\s(\\\\d{4}$)/\\n   * @description This pattern matches any string that's formatted in the following format: 1234 56XX XXXX 1121.\\n   * @example ValidationConstants.patterns.formattedCardNumber.test(\\\"1234 56XX XXXX 1121\\\")\\n   **/\\n  formattedCardNumber: /(^\\\\d{4})\\\\s(\\\\d{2}X{2})\\\\s(X{4})\\\\s(\\\\d{4}$)/,\\n  /**\\n   * @regex /[^\\\\dX\\\\s]/\\n   * @description The is pattern matches any string that contains characters that aren't digits, the uppercase letter 'X' and spaces.\\n   * @example ValidationConstants.patterns.invalidFormattedCardNumberCharacters.test(\\\"9876-5432-1098\\\")\\n   * @example ValidationConstants.patterns.invalidFormattedCardNumberCharacters.test(\\\"9876 5432 1098\\\")\\n   **/\\n  invalidFormattedCardNumberCharacters: /[^\\\\dX\\\\s]/,\\n  /**\\n   * @regex /^(?=.*[a-z])(?=.*[0-9])(?=.*[A-Z])(?=.*[!@#$%^&*()+\\\\-=\\\\[\\\\]{};':\\\\\\\"|,\\\\.<>\\\\?_~])[ -~]{8,16}$/\\n   * @description This pattern matches any string that contains 8-16 characters that include; at least one lowercase letter, at least one digit, at least one uppercase letter, and only printable ASCII characters (from '!' to '~')\\n   * @example ValidationConstants.patterns.tradingPlatformInvestorPassword.test(\\\"Password1!$\\\")\\n   **/\\n  tradingPlatformInvestorPassword: /^(?=.*[a-z])(?=.*[0-9])(?=.*[A-Z])(?=.*[!@#$%^&*()+\\\\-=\\\\[\\\\]{};':\\\\\\\"|,\\\\.<>\\\\?_~])[ -~]{8,16}$/,\\n  /**\\n   * @regex /^[A-Za-z]+([a-zA-Z.' -])*[a-zA-Z.' -]+$/\\n   * @description This pattern matches any string that starts with one or more letters (uppercase or lowercase), followed by zero or more occurrences of letters, and any of these characters (.' -) and ends with one or more occurrences of letters, and any of these characters (.' -).\\n   * @example ValidationConstants.patterns.letterSymbols.test(\\\"John Doe\\\")\\n   * @example ValidationConstants.patterns.letterSymbols.test(\\\"John-Doe\\\")\\n   * @example ValidationConstants.patterns.letterSymbols.test(\\\"John O'Doe\\\")\\n   */\\n  letterSymbols: /^[A-Za-z]+([a-zA-Z.' -])*[a-zA-Z.' -]+$/,\\n  /**\\n   * @regex /^(?!.*\\\\s{2,})(?!\\\\s)[\\\\p{L}\\\\s'.-]{1,50}$/u\\n   * @description This pattern matches any string that contains 1 to 50 characters, starts and ends with valid characters (letters, whitespace, period, single quote, or hyphen).\\n   * @example ValidationConstants.patterns.name.test(\\\"John Doe\\\")\\n   * @example ValidationConstants.patterns.name.test(\\\"John-Doe\\\")\\n   * @example ValidationConstants.patterns.name.test(\\\"John O'Doe\\\")\\n   * @example ValidationConstants.patterns.name.test(\\\"John O. Doe\\\")\\n   */\\n  name: /^(?!.*\\\\s{2,})(?!\\\\s)[\\\\p{L}\\\\s'.-]{1,50}$/u,\\n  /**\\n   * @regex /[`~!@#$%^&*)(_=+[}{\\\\]\\\\\\\\/\\\";:?><|]+/\\n   * @description This pattern matches any string that contains any of these characters: `~!@#$%^&*)(_=+[}{\\\\]\\\\\\\\/\\\";:?><|\\n   * @example ValidationConstants.patterns.general.test(\\\"Password1!\\\")\\n   */\\n  general: /[`~!@#$%^&*)(_=+[}{\\\\]\\\\\\\\/\\\";:?><|]+/,\\n  /**\\n   * @regex /[a-z]/\\n   * @description This pattern matches any string that contains lowercase letters.\\n   * @example ValidationConstants.patterns.lowercase.test(\\\"abc\\\")\\n   */\\n  lowercase: /[a-z]/,\\n  /**\\n   * @regex /\\\\d/\\n   * @description This pattern matches any string that contains digits.\\n   * @example ValidationConstants.patterns.number.test(\\\"pets123\\\")\\n   */\\n  number: /\\\\d/,\\n  /**\\n   * @regex /\\\\W/\\n   * @description This pattern matches any string that contains special characters.\\n   * @example ValidationConstants.patterns.specialCharacter.test(\\\"Password1!\\\")\\n   */\\n  specialCharacter: /\\\\W/,\\n  /**\\n   * @regex /[A-Z]/\\n   * @description This pattern matches any string that contains uppercase letters.\\n   * @example ValidationConstants.patterns.uppercase.test(\\\"ABC\\\")\\n   */\\n  uppercase: /[A-Z]/,\\n  /**\\n   * @regex /^.{8,16}$/\\n   * @description This pattern matches any string that contains 8-16 characters.\\n   * @example ValidationConstants.patterns.between8and16Characters.test(\\\"Password1!\\\")\\n   */\\n  between8and16Characters: /^.{8,16}$/,\\n  /**\\n   * @regex /^.{8,25}$/\\n   * @description This pattern matches any string that contains 8-25 characters.\\n   * @example ValidationConstants.patterns.between8and25Characters.test(\\\"Password1!\\\")\\n   */\\n  between8and25Characters: /^.{8,25}$/\\n}, rt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  messagesHints: ve,\\n  patterns: _e\\n}, Symbol.toStringTag, { value: \\\"Module\\\" })), G = {\\n  brandName: \\\"Deriv\\\",\\n  domainName: \\\"Deriv.com\\\"\\n}, I = {\\n  fx: \\\"Deriv (FX) Ltd\\\",\\n  maltainvest: \\\"Deriv Investments (Europe) Limited\\\",\\n  svg: \\\"Deriv (SVG) LLC\\\",\\n  v: \\\"Deriv (V) Ltd\\\"\\n}, Y = {\\n  trader: \\\"Deriv Trader\\\",\\n  dBot: \\\"Deriv Bot\\\",\\n  mt5: \\\"Deriv MT5\\\",\\n  cTrader: \\\"Deriv cTrader\\\",\\n  derivX: \\\"Deriv X\\\",\\n  smartTrader: \\\"SmartTrader\\\",\\n  bBot: \\\"Binary Bot\\\",\\n  go: \\\"Deriv GO\\\"\\n}, nt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  brandConfig: G,\\n  landingCompanies: I,\\n  platforms: Y\\n}, Symbol.toStringTag, { value: \\\"Module\\\" })), z = /(ALP-|AMN-|ANA-|ANE-|ANG-|AQM-|ARS-|ART-|ATU-|BAC-|BLA-|BRQ-|CAG-|CAM-|CAN-|CAZ-|CDL-|CDY-|CLT-|CRO-|CUN-|DIG-|DRA-|DUA-|DUB-|DVC-|ELE-|ELS-|EML-|EVA-|EVR-|FIG-|FLA-|FRL-|GLK-|HMA-|HW-|HWI-|INE-|JAT-|JEF-|JER-|JKM-|JNY-|JSC-|LDN-|LIO-|LON-|LUA-|LYA-|LYO-|MAR-|MED-|MHA-|MLA-|MRD-|MYA-|NCE-|NEO-|NOH-|NOP-|OCE-|PAR-|PIC-|POT-|PPA-|PRA-|RNE-|SEA-|SLA-|SNE-|SPN-|STK-|TAH-|TAS-|TET-|TRT-|VCE-|VIE-|VKY-|VNS-|VOG-|VTR-|WAS-|WKG-|WLZ-|JAD-|MLD-|RTE-|NAM-|NEN-|BAL-|JLN-|YAL-|MGA-|FGD-|XYAO-|BON-|ALN-|ALT-|BRA-|DBY2-|STG-|MAO-|LEM-|GOA-|FOA-|MNA-|LNA-)/, ot = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  huaweiDevicesRegex: z\\n}, Symbol.toStringTag, { value: \\\"Module\\\" })), ye = (e, t) => {\\n  try {\\n    const { locale: r = \\\"en-US\\\", currency: n, decimalPlaces: o } = t || {}, i = O[n ?? \\\"USD\\\"], a = o || i;\\n    return new Intl.NumberFormat(r, {\\n      minimumFractionDigits: a,\\n      maximumFractionDigits: a\\n    }).format(e);\\n  } catch {\\n    return e.toString();\\n  }\\n}, be = (e, t) => {\\n  let r;\\n  const {\\n    dateOptions: n = { day: \\\"2-digit\\\", month: \\\"2-digit\\\", year: \\\"numeric\\\" },\\n    format: o = \\\"YYYY-MM-DD\\\",\\n    unix: i = !1\\n  } = t || {}, a = { ...n };\\n  if (typeof e == \\\"number\\\" && i)\\n    r = new Date(e * 1e3);\\n  else if (typeof e == \\\"string\\\" || e instanceof Date) {\\n    if (r = new Date(e), isNaN(r.getTime()))\\n      throw new Error(\\\"Invalid date input\\\");\\n  } else\\n    throw new Error(\\\"Invalid date input\\\");\\n  switch (o) {\\n    case \\\"DD MMM YYYY\\\":\\n      a.day = \\\"2-digit\\\", a.month = \\\"short\\\", a.year = \\\"numeric\\\";\\n      break;\\n    case \\\"MMM DD YYYY\\\":\\n      return a.day = \\\"2-digit\\\", a.month = \\\"short\\\", a.year = \\\"numeric\\\", r.toLocaleDateString(\\\"en-GB\\\", a).replace(/(\\\\d{2}) (\\\\w{3}) (\\\\d{4})/, \\\"$2 $1 $3\\\");\\n    case \\\"DD-MM-YYYY\\\":\\n      return a.day = \\\"2-digit\\\", a.month = \\\"2-digit\\\", a.year = \\\"numeric\\\", r.toLocaleDateString(\\\"en-GB\\\", a).replace(/(\\\\d{2})\\\\/(\\\\d{2})\\\\/(\\\\d{4})/, \\\"$1-$2-$3\\\");\\n    default:\\n      a.year = \\\"numeric\\\", a.month = \\\"2-digit\\\", a.day = \\\"2-digit\\\";\\n      break;\\n  }\\n  const s = r.toLocaleDateString(\\\"en-GB\\\", a).replace(/(\\\\d{2}) (\\\\w{3,4}) (\\\\d{4})/, (c, u, l, p) => `${u} ${l.slice(0, 3)} ${p}`);\\n  return o === \\\"YYYY-MM-DD\\\" ? s.replace(/(\\\\d{2})\\\\/(\\\\d{2})\\\\/(\\\\d{4})/, \\\"$3-$2-$1\\\") : s;\\n}, we = (e, t = !1) => {\\n  let r;\\n  if (typeof e == \\\"number\\\" && t)\\n    r = new Date(e * 1e3);\\n  else if (typeof e == \\\"string\\\" || e instanceof Date) {\\n    if (r = new Date(e), isNaN(r.getTime()))\\n      throw new Error(\\\"Invalid date input\\\");\\n  } else\\n    throw new Error(\\\"Invalid date input\\\");\\n  return `${r.getUTCHours().toString().padStart(2, \\\"0\\\")}:${r.getUTCMinutes().toString().padStart(2, \\\"0\\\")}:${r.getUTCSeconds().toString().padStart(2, \\\"0\\\")} GMT`;\\n}, Le = (e, t = \\\"days\\\", r = \\\"add\\\") => {\\n  if (e < 0)\\n    throw new Error(\\\"Amount must be a positive number.\\\");\\n  const n = /* @__PURE__ */ new Date(), o = r === \\\"add\\\" ? e : -e;\\n  return t === \\\"years\\\" ? n.setFullYear(n.getFullYear() + o) : t === \\\"days\\\" && n.setDate(n.getDate() + o), n;\\n}, Pe = (e) => {\\n  const t = e.split(/,\\\\s/), r = /:\\\\s([0-9a-zA-Z]+.{25,28})/gm.exec(t[0]), n = r == null ? void 0 : r[1], o = /:\\\\s([0-9a-zA-Z]+.{25,34})/gm.exec(t[1]), i = o == null ? void 0 : o[1];\\n  return { addressHash: n, blockchainHash: i, splitLongcode: t };\\n}, at = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  formatMoney: ye,\\n  getAdjustedDate: Le,\\n  getFormattedDateString: be,\\n  getFormattedTimeString: we,\\n  parseCryptoLongcode: Pe\\n}, Symbol.toStringTag, { value: \\\"Module\\\" })), w = 2560, Ce = 0.9, Oe = 4, Z = ({ src: e, filename: t, options: r }) => {\\n  const { maxWidth: n = w, quality: o = Ce } = r || {};\\n  return new Promise((i, a) => {\\n    const s = new Image();\\n    s.src = e, s.onload = () => {\\n      const c = document.createElement(\\\"canvas\\\"), u = c.getContext(\\\"2d\\\");\\n      if (!u || !(u instanceof CanvasRenderingContext2D))\\n        return a(new Error(\\\"Failed to get 2D context\\\"));\\n      if (s.naturalWidth > n) {\\n        const l = w, p = l / s.naturalWidth;\\n        c.width = l, c.height = s.naturalHeight * p;\\n      } else\\n        c.width = s.naturalWidth, c.height = s.naturalHeight;\\n      u.fillStyle = \\\"transparent\\\", u.fillRect(0, 0, c.width, c.height), u.save(), u.drawImage(s, 0, 0, c.width, c.height), c.toBlob(\\n        (l) => {\\n          if (!l)\\n            return;\\n          const p = t.replace(/\\\\.[^/.]+$/, \\\".jpg\\\"), A = new Blob([l], { type: \\\"image/jpeg\\\" });\\n          A.lastModifiedDate = Date.now(), A.name = p, i(A);\\n        },\\n        \\\"image/jpeg\\\",\\n        o\\n      );\\n    };\\n  });\\n}, x = (e) => new Promise((t) => {\\n  const r = new FileReader();\\n  r.readAsDataURL(e), r.onloadend = () => {\\n    var n;\\n    t({\\n      src: ((n = r.result) == null ? void 0 : n.toString()) || \\\"\\\",\\n      filename: e.name\\n    });\\n  };\\n}), K = (e) => e ? T.some(\\n  (t) => e.toUpperCase().endsWith(t)\\n) : !1, Te = (e) => new Promise((t) => {\\n  K(e.name) ? x(e).then((r) => {\\n    Z(r).then(t);\\n  }) : t(e);\\n});\\nfunction Re(e, t = Oe) {\\n  const r = new Uint8Array(t);\\n  return new DataView(r.buffer).setUint32(0, e), r;\\n}\\nconst Ue = (e, {\\n  chunkSize: t = 16384\\n  /* 16KB */\\n}) => {\\n  const r = [];\\n  for (let n = 0; n < e.length; n++) {\\n    const o = e[n];\\n    n % t === 0 ? r.push([o]) : r[r.length - 1].push(o);\\n  }\\n  return r.map((n) => new Uint8Array(n)).concat(new Uint8Array([]));\\n}, Me = (e) => {\\n  const t = new FileReader();\\n  return new Promise((r) => {\\n    t.onload = () => {\\n      const n = {\\n        filename: e.name,\\n        buffer: t.result,\\n        fileSize: e.size\\n      };\\n      r(n);\\n    }, t.onerror = () => {\\n      r({\\n        message: `Unable to read file ${e.name}`\\n      });\\n    }, t.readAsArrayBuffer(e);\\n  });\\n}, st = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  compressImage: Z,\\n  compressImageFile: Te,\\n  convertToBase64: x,\\n  generateChunks: Ue,\\n  isSupportedImageFormat: K,\\n  numToUint8Array: Re,\\n  readFile: Me\\n}, Symbol.toStringTag, { value: \\\"Module\\\" })), g = (e) => {\\n  const t = localStorage.getItem(e);\\n  if (t !== \\\"undefined\\\") {\\n    if (t === null || t === \\\"null\\\")\\n      return null;\\n    try {\\n      return JSON.parse(t);\\n    } catch {\\n      return null;\\n    }\\n  }\\n}, Ne = (e, t) => {\\n  localStorage.setItem(e, JSON.stringify(t));\\n}, it = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  getValue: g,\\n  setValue: Ne\\n}, Symbol.toStringTag, { value: \\\"Module\\\" })), H = (e) => Object.keys(e).sort().reduce((t, r) => (t[r] = e[r], t), {}), $e = async (e) => {\\n  const t = new TextEncoder().encode(JSON.stringify(H(e))), r = await crypto.subtle.digest(\\\"SHA-256\\\", t);\\n  return Array.from(new Uint8Array(r)).map((i) => (\\\"00\\\" + i.toString(16)).slice(-2)).join(\\\"\\\");\\n}, W = (e, t) => Array.isArray(e) && Array.isArray(t) ? t.map((r, n) => W(e[n], r)) : typeof e == \\\"object\\\" && e !== null && typeof t == \\\"object\\\" && t !== null ? V(e, t) : t, V = (e, ...t) => {\\n  for (const r of t)\\n    for (const n in r)\\n      r[n] === null || r[n] === void 0 || (e[n] = W(e[n], r[n]));\\n  return e;\\n}, ct = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  hashObject: $e,\\n  merge: V,\\n  sortObjectByKeys: H\\n}, Symbol.toStringTag, { value: \\\"Module\\\" }));\\nfunction Ee() {\\n  let e, t;\\n  return {\\n    promise: new Promise((n, o) => {\\n      e = n, t = o;\\n    }),\\n    resolve: e,\\n    reject: t\\n  };\\n}\\nconst dt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  createPromise: Ee\\n}, Symbol.toStringTag, { value: \\\"Module\\\" })), k = () => {\\n  const t = new URLSearchParams(window.location.search).get(\\\"acct1\\\");\\n  return g(R) || t;\\n}, J = (e) => e && !/^VR/.test(e) ? \\\"real\\\" : \\\"demo\\\", b = () => {\\n  const e = g(U);\\n  if (e)\\n    return e;\\n  const t = window.location.hostname, r = C[t];\\n  return r || \\\"36300\\\";\\n}, lt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  getActiveLoginid: k,\\n  getAppId: b,\\n  getEnvironmentFromLoginid: J\\n}, Symbol.toStringTag, { value: \\\"Module\\\" })), Be = () => {\\n  const e = [], t = [], r = new URLSearchParams(window.location.search);\\n  for (const [o, i] of r.entries()) {\\n    const a = o.match(/^acct(\\\\d+)/), s = o.match(/^token(\\\\d+)/), c = o.match(/^cur(\\\\d+)/);\\n    a && (e[+a[1] - 1] = {\\n      ...e[+a[1] - 1] || {},\\n      loginid: i\\n    }), s && (e[+s[1] - 1] = {\\n      ...e[+s[1] - 1] || {},\\n      token: i\\n    }), c && (e[+c[1] - 1] = {\\n      ...e[+c[1] - 1] || {},\\n      currency: i\\n    }), (/acct/.test(o) || /token/.test(o) || /cur/.test(o)) && t.push(o);\\n  }\\n  return { loginInfo: e.filter(\\n    (o) => [\\\"loginid\\\", \\\"token\\\", \\\"currency\\\"].every((i) => Object.keys(o).includes(i))\\n  ), paramsToDelete: t };\\n}, je = (e) => {\\n  if (e != null && e.length)\\n    return e.find((t) => /^VR/.test(t.loginid)) || e[0];\\n}, Fe = (e) => {\\n  const t = new URLSearchParams(window.location.search);\\n  e.forEach((n) => t.delete(n));\\n  const r = `${window.location.pathname}${t.toString() ? `?${t.toString()}` : \\\"\\\"}`;\\n  window.history.pushState(null, \\\"\\\", r);\\n}, Ge = () => {\\n  const e = g(S) ?? \\\"EN\\\";\\n  return `https://oauth.deriv.com/oauth2/authorize?app_id=${b()}&l=${e}&brand=${_}`;\\n}, X = () => {\\n  const e = g(M);\\n  if (e)\\n    return e;\\n  const t = k();\\n  return P[J(t)];\\n}, Ie = () => {\\n  const e = X(), t = g(S) ?? \\\"EN\\\";\\n  return `wss://${e}/websockets/v3?app_id=${b()}&l=${t}&brand=${_}`;\\n}, Ye = (e) => new URLSearchParams(window.location.search).get(e), D = (e) => e.replace(/(^\\\\/|\\\\/$|[^a-zA-Z0-9-_./()#])/g, \\\"\\\"), ze = (e, t) => {\\n  var o;\\n  const r = t != null && t.isEU ? j : B;\\n  let n = ((o = g(S)) == null ? void 0 : o.toLowerCase()) ?? \\\"en\\\";\\n  return n = n === \\\"en\\\" ? \\\"\\\" : `/${n.replace(\\\"_\\\", \\\"-\\\")}`, t != null && t.isDocument ? `${r}/${D(e)}` : `${r}${n}/${D(e)}`;\\n}, Ze = (e) => /^(((.*)\\\\.)?(localhost:8443|pages.dev|binary\\\\.(sx|com)|deriv.(com|me|be|dev)))$/.test(e), ut = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  filterSearchParams: Fe,\\n  getDefaultActiveAccount: je,\\n  getDerivStaticURL: ze,\\n  getLoginInfoFromURL: Be,\\n  getOauthURL: Ge,\\n  getQueryParameter: Ye,\\n  getServerURL: X,\\n  getWebsocketURL: Ie,\\n  isDomainAllowed: Ze,\\n  normalizePath: D\\n}, Symbol.toStringTag, { value: \\\"Module\\\" })), xe = (e) => I[e], Ke = () => G.domainName, He = (e) => Y[e], gt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  getBrandWebsiteName: Ke,\\n  getLegalLandingCompany: xe,\\n  getPlatformName: He\\n}, Symbol.toStringTag, { value: \\\"Module\\\" })), L = (e) => z.test(e), We = async () => {\\n  const e = window, t = navigator, r = t.userAgent ?? e.opera ?? \\\"\\\";\\n  if (/windows phone/i.test(r))\\n    return \\\"Windows Phone\\\";\\n  if (/android/i.test(r)) {\\n    if (t.userAgentData) {\\n      const n = await t.userAgentData.getHighEntropyValues([\\\"model\\\"]);\\n      if (L((n == null ? void 0 : n.model) || \\\"\\\"))\\n        return \\\"huawei\\\";\\n    } else if (L(r) || /huawei/i.test(r))\\n      return \\\"huawei\\\";\\n    return \\\"Android\\\";\\n  }\\n  return /iPad|iPhone|iPod/.test(r) && !e.MSStream ? \\\"iOS\\\" : \\\"unknown\\\";\\n}, pt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  mobileOSDetectAsync: We\\n}, Symbol.toStringTag, { value: \\\"Module\\\" }));\\n/*! js-cookie v3.0.5 | MIT */\\nfunction m(e) {\\n  for (var t = 1; t < arguments.length; t++) {\\n    var r = arguments[t];\\n    for (var n in r)\\n      e[n] = r[n];\\n  }\\n  return e;\\n}\\nvar Ve = {\\n  read: function(e) {\\n    return e[0] === '\\\"' && (e = e.slice(1, -1)), e.replace(/(%[\\\\dA-F]{2})+/gi, decodeURIComponent);\\n  },\\n  write: function(e) {\\n    return encodeURIComponent(e).replace(\\n      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,\\n      decodeURIComponent\\n    );\\n  }\\n};\\nfunction v(e, t) {\\n  function r(o, i, a) {\\n    if (!(typeof document > \\\"u\\\")) {\\n      a = m({}, t, a), typeof a.expires == \\\"number\\\" && (a.expires = new Date(Date.now() + a.expires * 864e5)), a.expires && (a.expires = a.expires.toUTCString()), o = encodeURIComponent(o).replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent).replace(/[()]/g, escape);\\n      var s = \\\"\\\";\\n      for (var c in a)\\n        a[c] && (s += \\\"; \\\" + c, a[c] !== !0 && (s += \\\"=\\\" + a[c].split(\\\";\\\")[0]));\\n      return document.cookie = o + \\\"=\\\" + e.write(i, o) + s;\\n    }\\n  }\\n  function n(o) {\\n    if (!(typeof document > \\\"u\\\" || arguments.length && !o)) {\\n      for (var i = document.cookie ? document.cookie.split(\\\"; \\\") : [], a = {}, s = 0; s < i.length; s++) {\\n        var c = i[s].split(\\\"=\\\"), u = c.slice(1).join(\\\"=\\\");\\n        try {\\n          var l = decodeURIComponent(c[0]);\\n          if (a[l] = e.read(u, l), o === l)\\n            break;\\n        } catch {\\n        }\\n      }\\n      return o ? a[o] : a;\\n    }\\n  }\\n  return Object.create(\\n    {\\n      set: r,\\n      get: n,\\n      remove: function(o, i) {\\n        r(\\n          o,\\n          \\\"\\\",\\n          m({}, i, {\\n            expires: -1\\n          })\\n        );\\n      },\\n      withAttributes: function(o) {\\n        return v(this.converter, m({}, this.attributes, o));\\n      },\\n      withConverter: function(o) {\\n        return v(m({}, this.converter, o), this.attributes);\\n      }\\n    },\\n    {\\n      attributes: { value: Object.freeze(t) },\\n      converter: { value: Object.freeze(e) }\\n    }\\n  );\\n}\\nvar ke = v(Ve, { path: \\\"/\\\" });\\nlet f = null;\\nconst Je = async () => {\\n  var t;\\n  if (f)\\n    return f;\\n  const e = (t = JSON.parse(ke.get(\\\"website_status\\\") || \\\"{}\\\")) == null ? void 0 : t.clients_country;\\n  return f = (async () => {\\n    var r;\\n    try {\\n      const n = await fetch(F).catch(() => null);\\n      if (!n)\\n        return e || \\\"\\\";\\n      const o = await n.text().catch(() => \\\"\\\");\\n      return o ? ((r = Object.fromEntries(o.split(`\\n`).map((a) => a.split(\\\"=\\\", 2))).loc) == null ? void 0 : r.toLowerCase()) || e || \\\"\\\" : e || \\\"\\\";\\n    } catch {\\n      return e || \\\"\\\";\\n    }\\n  })(), f;\\n}, mt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  getCountry: Je\\n}, Symbol.toStringTag, { value: \\\"Module\\\" }));\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///../../node_modules/@deriv-com/utils/dist/deriv-utils.js\\n\");\n\n/***/ }),\n\n/***/ \"../api/src/remote_config.json\":\n/*!*************************************!*\\\n  !*** ../api/src/remote_config.json ***!\n  \\*************************************/\n/***/ ((module) => {\n\nmodule.exports = /*#__PURE__*/JSON.parse('{\"cs_chat_livechat\":true,\"cs_chat_whatsapp\":true,\"marketing_growthbook\":true,\"passkeys\":true,\"tracking_GTM\":true,\"tracking_datadog\":true,\"tracking_hotjar\":true,\"tracking_rudderstack\":true}');\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_145940__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_145940__);\n/******/ \t\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_145940__.m = __webpack_modules__;\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/chunk prefetch function */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_145940__.F = {};\n/******/ \t\t__nested_webpack_require_145940__.E = (chunkId) => {\n/******/ \t\t\tObject.keys(__nested_webpack_require_145940__.F).map((key) => {\n/******/ \t\t\t\t__nested_webpack_require_145940__.F[key](chunkId);\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_145940__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_145940__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/create fake namespace object */\n/******/ \t(() => {\n/******/ \t\tvar getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\n/******/ \t\tvar leafPrototypes;\n/******/ \t\t// create a fake namespace object\n/******/ \t\t// mode & 1: value is a module id, require it\n/******/ \t\t// mode & 2: merge all properties of value into the ns\n/******/ \t\t// mode & 4: return value when already ns object\n/******/ \t\t// mode & 16: return value when it's Promise-like\n/******/ \t\t// mode & 8|1: behave like require\n/******/ \t\t__nested_webpack_require_145940__.t = function(value, mode) {\n/******/ \t\t\tif(mode & 1) value = this(value);\n/******/ \t\t\tif(mode & 8) return value;\n/******/ \t\t\tif(typeof value === 'object' && value) {\n/******/ \t\t\t\tif((mode & 4) && value.__esModule) return value;\n/******/ \t\t\t\tif((mode & 16) && typeof value.then === 'function') return value;\n/******/ \t\t\t}\n/******/ \t\t\tvar ns = Object.create(null);\n/******/ \t\t\t__nested_webpack_require_145940__.r(ns);\n/******/ \t\t\tvar def = {};\n/******/ \t\t\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n/******/ \t\t\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n/******/ \t\t\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n/******/ \t\t\t}\n/******/ \t\t\tdef['default'] = () => (value);\n/******/ \t\t\t__nested_webpack_require_145940__.d(ns, def);\n/******/ \t\t\treturn ns;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_145940__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_145940__.o(definition, key) && !__nested_webpack_require_145940__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/ensure chunk */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_145940__.f = {};\n/******/ \t\t// This file contains only the entry chunk.\n/******/ \t\t// The chunk loading function for additional chunks\n/******/ \t\t__nested_webpack_require_145940__.e = (chunkId) => {\n/******/ \t\t\treturn Promise.all(Object.keys(__nested_webpack_require_145940__.f).reduce((promises, key) => {\n/******/ \t\t\t\t__nested_webpack_require_145940__.f[key](chunkId, promises);\n/******/ \t\t\t\treturn promises;\n/******/ \t\t\t}, []));\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get javascript chunk filename */\n/******/ \t(() => {\n/******/ \t\t// This function allow to reference async chunks\n/******/ \t\t__nested_webpack_require_145940__.u = (chunkId) => {\n/******/ \t\t\t// return url for filenames based on template\n/******/ \t\t\treturn \"trader/js/trader.\" + chunkId + \".\" + {\"vendors-node_modules_bowser_es5_js-node_modules_dayjs_dayjs_min_js-node_modules_lodash_deboun-8ca634\":\"de0452865bc86c3dc3fc\",\"vendors-node_modules_react-content-loader_dist_react-content-loader_es_js-node_modules_react--c10131\":\"bb9b637acb75f2bc0b39\",\"src_sass_app_scss-src_App_Components_Elements_PositionsDrawer_helpers_index_ts-src_App_init-s-ba58f8\":\"3065c77615d59f8298af\",\"trader-app\":\"5115f7c1d4bbcd204a95\",\"vendors-node_modules_cloudflare_stream-react_dist_stream-react_esm_js-node_modules_deriv_quil-145140\":\"953216750c849c03a62b\",\"hooks_src_useMFAccountStatus_ts-src_Modules_Trading_Helpers_video-config_ts-src_Stores_Module-77c64e\":\"fd9d05a0cca318bc350a\",\"src_Modules_Contract_Containers_replay-chart_tsx-src_Stores_Modules_Trading_Helpers_logic_ts\":\"b35c560bfebc316020a6\",\"trader-app-v2\":\"366ade8e1d974d63faba\",\"trade-modals\":\"33efcb90ba693405cccb\",\"error-component\":\"24fe6739097bd2958fce\",\"contract\":\"935dc684bdcd071d9b76\",\"market-countdown-timer\":\"b3f392cf58edf6a649f3\",\"vendors-node_modules_deriv_quill-icons_dist_esm_react_LabelPaired_LabelPairedChevronsDownCapt-dee9aa\":\"382d17e67da104c25bd3\",\"src_Modules_Trading_Components_Form_TradeParams_Accumulator_accumulators-info-display_tsx-src-a7086a\":\"7af9cd6e96156ace20c0\",\"screen-small\":\"0688d15df567f952ffbb\",\"screen-large\":\"2bc2c8960511d292b254\",\"settings-chart\":\"a25a0c0dcec576e89a5e\",\"accumulators-trade-description\":\"ba5bfc5072200c3ac964\",\"multipliers-trade-description\":\"d4b029806bdc63056969\",\"vanillas-trade-description\":\"0725da979f485569e402\",\"turbos-trade-description\":\"c245100ce303d1e587a7\",\"rise-fall-trade-description\":\"e324b6c707c7bbcb9667\",\"higher-lower-trade-description\":\"505ef70265999bf94f01\",\"touch-no-touch-trade-description\":\"ded06168f5c17efcf1e0\",\"matches-differs-trade-description\":\"884aae61dfca1eea8ad4\",\"even-odd-trade-description\":\"aa75f394e290d3abdb6c\",\"over-under-trade-description\":\"ad377287b70b2811c746\"}[chunkId] + \".js\";\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get mini-css chunk filename */\n/******/ \t(() => {\n/******/ \t\t// This function allow to reference all chunks\n/******/ \t\t__nested_webpack_require_145940__.miniCssF = (chunkId) => {\n/******/ \t\t\t// return url for filenames based on template\n/******/ \t\t\treturn \"trader/css/trader.\" + chunkId + \".\" + {\"vendors-node_modules_react-content-loader_dist_react-content-loader_es_js-node_modules_react--c10131\":\"0f8feaa067700b0592b6\",\"src_sass_app_scss-src_App_Components_Elements_PositionsDrawer_helpers_index_ts-src_App_init-s-ba58f8\":\"6e1d617fde328202093b\",\"trader-app\":\"83c7fa877f33dd1d1005\",\"vendors-node_modules_cloudflare_stream-react_dist_stream-react_esm_js-node_modules_deriv_quil-145140\":\"de9d0001cf93ddd80ebe\",\"trader-app-v2\":\"0b97ddfb5f547d589250\",\"trade-modals\":\"5d33fce87261854c04de\",\"src_Modules_Trading_Components_Form_TradeParams_Accumulator_accumulators-info-display_tsx-src-a7086a\":\"f865e83048c84a607555\",\"screen-small\":\"9f04f7a78cc52d4b2049\"}[chunkId] + \".css\";\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/global */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_145940__.g = (function() {\n/******/ \t\t\tif (typeof globalThis === 'object') return globalThis;\n/******/ \t\t\ttry {\n/******/ \t\t\t\treturn this || new Function('return this')();\n/******/ \t\t\t} catch (e) {\n/******/ \t\t\t\tif (typeof window === 'object') return window;\n/******/ \t\t\t}\n/******/ \t\t})();\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_145940__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/load script */\n/******/ \t(() => {\n/******/ \t\tvar inProgress = {};\n/******/ \t\tvar dataWebpackPrefix = \"@deriv/trader:\";\n/******/ \t\t// loadScript function to load a script via script tag\n/******/ \t\t__nested_webpack_require_145940__.l = (url, done, key, chunkId) => {\n/******/ \t\t\tif(inProgress[url]) { inProgress[url].push(done); return; }\n/******/ \t\t\tvar script, needAttach;\n/******/ \t\t\tif(key !== undefined) {\n/******/ \t\t\t\tvar scripts = document.getElementsByTagName(\"script\");\n/******/ \t\t\t\tfor(var i = 0; i < scripts.length; i++) {\n/******/ \t\t\t\t\tvar s = scripts[i];\n/******/ \t\t\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tif(!script) {\n/******/ \t\t\t\tneedAttach = true;\n/******/ \t\t\t\tscript = document.createElement('script');\n/******/ \t\t\n/******/ \t\t\t\tscript.charset = 'utf-8';\n/******/ \t\t\t\tscript.timeout = 120;\n/******/ \t\t\t\tif (__nested_webpack_require_145940__.nc) {\n/******/ \t\t\t\t\tscript.setAttribute(\"nonce\", __nested_webpack_require_145940__.nc);\n/******/ \t\t\t\t}\n/******/ \t\t\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n/******/ \t\t\n/******/ \t\t\t\tscript.src = url;\n/******/ \t\t\t}\n/******/ \t\t\tinProgress[url] = [done];\n/******/ \t\t\tvar onScriptComplete = (prev, event) => {\n/******/ \t\t\t\t// avoid mem leaks in IE.\n/******/ \t\t\t\tscript.onerror = script.onload = null;\n/******/ \t\t\t\tclearTimeout(timeout);\n/******/ \t\t\t\tvar doneFns = inProgress[url];\n/******/ \t\t\t\tdelete inProgress[url];\n/******/ \t\t\t\tscript.parentNode && script.parentNode.removeChild(script);\n/******/ \t\t\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n/******/ \t\t\t\tif(prev) return prev(event);\n/******/ \t\t\t}\n/******/ \t\t\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n/******/ \t\t\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n/******/ \t\t\tscript.onload = onScriptComplete.bind(null, script.onload);\n/******/ \t\t\tneedAttach && document.head.appendChild(script);\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__nested_webpack_require_145940__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/node module decorator */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_145940__.nmd = (module) => {\n/******/ \t\t\tmodule.paths = [];\n/******/ \t\t\tif (!module.children) module.children = [];\n/******/ \t\t\treturn module;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/publicPath */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_145940__.p = \"/\";\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/css loading */\n/******/ \t(() => {\n/******/ \t\tvar createStylesheet = (chunkId, fullhref, resolve, reject) => {\n/******/ \t\t\tvar linkTag = document.createElement(\"link\");\n/******/ \t\t\n/******/ \t\t\tlinkTag.rel = \"stylesheet\";\n/******/ \t\t\tlinkTag.type = \"text/css\";\n/******/ \t\t\tvar onLinkComplete = (event) => {\n/******/ \t\t\t\t// avoid mem leaks.\n/******/ \t\t\t\tlinkTag.onerror = linkTag.onload = null;\n/******/ \t\t\t\tif (event.type === 'load') {\n/******/ \t\t\t\t\tresolve();\n/******/ \t\t\t\t} else {\n/******/ \t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n/******/ \t\t\t\t\tvar realHref = event && event.target && event.target.href || fullhref;\n/******/ \t\t\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + realHref + \")\");\n/******/ \t\t\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n/******/ \t\t\t\t\terr.type = errorType;\n/******/ \t\t\t\t\terr.request = realHref;\n/******/ \t\t\t\t\tlinkTag.parentNode.removeChild(linkTag)\n/******/ \t\t\t\t\treject(err);\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tlinkTag.onerror = linkTag.onload = onLinkComplete;\n/******/ \t\t\tlinkTag.href = fullhref;\n/******/ \t\t\n/******/ \t\t\tdocument.head.appendChild(linkTag);\n/******/ \t\t\treturn linkTag;\n/******/ \t\t};\n/******/ \t\tvar findStylesheet = (href, fullhref) => {\n/******/ \t\t\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n/******/ \t\t\tfor(var i = 0; i < existingLinkTags.length; i++) {\n/******/ \t\t\t\tvar tag = existingLinkTags[i];\n/******/ \t\t\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n/******/ \t\t\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return tag;\n/******/ \t\t\t}\n/******/ \t\t\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n/******/ \t\t\tfor(var i = 0; i < existingStyleTags.length; i++) {\n/******/ \t\t\t\tvar tag = existingStyleTags[i];\n/******/ \t\t\t\tvar dataHref = tag.getAttribute(\"data-href\");\n/******/ \t\t\t\tif(dataHref === href || dataHref === fullhref) return tag;\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t\tvar loadStylesheet = (chunkId) => {\n/******/ \t\t\treturn new Promise((resolve, reject) => {\n/******/ \t\t\t\tvar href = __nested_webpack_require_145940__.miniCssF(chunkId);\n/******/ \t\t\t\tvar fullhref = __nested_webpack_require_145940__.p + href;\n/******/ \t\t\t\tif(findStylesheet(href, fullhref)) return resolve();\n/******/ \t\t\t\tcreateStylesheet(chunkId, fullhref, resolve, reject);\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t\t// object to store loaded CSS chunks\n/******/ \t\tvar installedCssChunks = {\n/******/ \t\t\t\"trader\": 0\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t__nested_webpack_require_145940__.f.miniCss = (chunkId, promises) => {\n/******/ \t\t\tvar cssChunks = {\"vendors-node_modules_react-content-loader_dist_react-content-loader_es_js-node_modules_react--c10131\":1,\"src_sass_app_scss-src_App_Components_Elements_PositionsDrawer_helpers_index_ts-src_App_init-s-ba58f8\":1,\"trader-app\":1,\"vendors-node_modules_cloudflare_stream-react_dist_stream-react_esm_js-node_modules_deriv_quil-145140\":1,\"trader-app-v2\":1,\"trade-modals\":1,\"src_Modules_Trading_Components_Form_TradeParams_Accumulator_accumulators-info-display_tsx-src-a7086a\":1,\"screen-small\":1};\n/******/ \t\t\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n/******/ \t\t\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n/******/ \t\t\t\tpromises.push(installedCssChunks[chunkId] = loadStylesheet(chunkId).then(() => {\n/******/ \t\t\t\t\tinstalledCssChunks[chunkId] = 0;\n/******/ \t\t\t\t}, (e) => {\n/******/ \t\t\t\t\tdelete installedCssChunks[chunkId];\n/******/ \t\t\t\t\tthrow e;\n/******/ \t\t\t\t}));\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t// no hmr\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/jsonp chunk loading */\n/******/ \t(() => {\n/******/ \t\t// no baseURI\n/******/ \t\t\n/******/ \t\t// object to store loaded and loading chunks\n/******/ \t\t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n/******/ \t\t// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\n/******/ \t\tvar installedChunks = {\n/******/ \t\t\t\"trader\": 0\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t__nested_webpack_require_145940__.f.j = (chunkId, promises) => {\n/******/ \t\t\t\t// JSONP chunk loading for javascript\n/******/ \t\t\t\tvar installedChunkData = __nested_webpack_require_145940__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n/******/ \t\t\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n/******/ \t\t\n/******/ \t\t\t\t\t// a Promise means \"currently loading\".\n/******/ \t\t\t\t\tif(installedChunkData) {\n/******/ \t\t\t\t\t\tpromises.push(installedChunkData[2]);\n/******/ \t\t\t\t\t} else {\n/******/ \t\t\t\t\t\tif(true) { // all chunks have JS\n/******/ \t\t\t\t\t\t\t// setup Promise in chunk cache\n/******/ \t\t\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n/******/ \t\t\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n/******/ \t\t\n/******/ \t\t\t\t\t\t\t// start chunk loading\n/******/ \t\t\t\t\t\t\tvar url = __nested_webpack_require_145940__.p + __nested_webpack_require_145940__.u(chunkId);\n/******/ \t\t\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n/******/ \t\t\t\t\t\t\tvar error = new Error();\n/******/ \t\t\t\t\t\t\tvar loadingEnded = (event) => {\n/******/ \t\t\t\t\t\t\t\tif(__nested_webpack_require_145940__.o(installedChunks, chunkId)) {\n/******/ \t\t\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n/******/ \t\t\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n/******/ \t\t\t\t\t\t\t\t\tif(installedChunkData) {\n/******/ \t\t\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n/******/ \t\t\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n/******/ \t\t\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n/******/ \t\t\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n/******/ \t\t\t\t\t\t\t\t\t\terror.type = errorType;\n/******/ \t\t\t\t\t\t\t\t\t\terror.request = realSrc;\n/******/ \t\t\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n/******/ \t\t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t};\n/******/ \t\t\t\t\t\t\t__nested_webpack_require_145940__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n/******/ \t\t\t\t\t\t}\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t}\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t__nested_webpack_require_145940__.F.j = (chunkId) => {\n/******/ \t\t\tif((!__nested_webpack_require_145940__.o(installedChunks, chunkId) || installedChunks[chunkId] === undefined) && true) {\n/******/ \t\t\t\tinstalledChunks[chunkId] = null;\n/******/ \t\t\t\tvar link = document.createElement('link');\n/******/ \t\t\n/******/ \t\t\t\tif (__nested_webpack_require_145940__.nc) {\n/******/ \t\t\t\t\tlink.setAttribute(\"nonce\", __nested_webpack_require_145940__.nc);\n/******/ \t\t\t\t}\n/******/ \t\t\t\tlink.rel = \"prefetch\";\n/******/ \t\t\t\tlink.as = \"script\";\n/******/ \t\t\t\tlink.href = __nested_webpack_require_145940__.p + __nested_webpack_require_145940__.u(chunkId);\n/******/ \t\t\t\tdocument.head.appendChild(link);\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t// no preloaded\n/******/ \t\t\n/******/ \t\t// no HMR\n/******/ \t\t\n/******/ \t\t// no HMR manifest\n/******/ \t\t\n/******/ \t\t// no on chunks loaded\n/******/ \t\t\n/******/ \t\t// install a JSONP callback for chunk loading\n/******/ \t\tvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n/******/ \t\t\tvar [chunkIds, moreModules, runtime] = data;\n/******/ \t\t\t// add \"moreModules\" to the modules object,\n/******/ \t\t\t// then flag all \"chunkIds\" as loaded and fire callback\n/******/ \t\t\tvar moduleId, chunkId, i = 0;\n/******/ \t\t\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n/******/ \t\t\t\tfor(moduleId in moreModules) {\n/******/ \t\t\t\t\tif(__nested_webpack_require_145940__.o(moreModules, moduleId)) {\n/******/ \t\t\t\t\t\t__nested_webpack_require_145940__.m[moduleId] = moreModules[moduleId];\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t}\n/******/ \t\t\t\tif(runtime) var result = runtime(__nested_webpack_require_145940__);\n/******/ \t\t\t}\n/******/ \t\t\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n/******/ \t\t\tfor(;i < chunkIds.length; i++) {\n/******/ \t\t\t\tchunkId = chunkIds[i];\n/******/ \t\t\t\tif(__nested_webpack_require_145940__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n/******/ \t\t\t\t\tinstalledChunks[chunkId][0]();\n/******/ \t\t\t\t}\n/******/ \t\t\t\tinstalledChunks[chunkId] = 0;\n/******/ \t\t\t}\n/******/ \t\t\n/******/ \t\t}\n/******/ \t\t\n/******/ \t\tvar chunkLoadingGlobal = self[\"webpackChunk_deriv_trader\"] = self[\"webpackChunk_deriv_trader\"] || [];\n/******/ \t\tchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\n/******/ \t\tchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/chunk prefetch trigger */\n/******/ \t(() => {\n/******/ \t\tvar chunkToChildrenMap = {\n/******/ \t\t\t\"trader-app\": [\n/******/ \t\t\t\t\"trade-modals\",\n/******/ \t\t\t\t\"settings-chart\"\n/******/ \t\t\t]\n/******/ \t\t};\n/******/ \t\t__nested_webpack_require_145940__.f.prefetch = (chunkId, promises) => (Promise.all(promises).then(() => {\n/******/ \t\t\tvar chunks = chunkToChildrenMap[chunkId];\n/******/ \t\t\tArray.isArray(chunks) && chunks.map(__nested_webpack_require_145940__.E);\n/******/ \t\t}));\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// module factories are used so entry inlining is disabled\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \tvar __nested_webpack_exports__ = __nested_webpack_require_145940__(\"./src/index.tsx\");\n/******/ \t__nested_webpack_exports__ = __nested_webpack_exports__[\"default\"];\n/******/ \t\n/******/ \treturn __nested_webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../trader/dist/trader/js/trader.js\n");

/***/ })

}]);